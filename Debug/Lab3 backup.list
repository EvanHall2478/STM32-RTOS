
Lab3 backup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003738  08003738  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003740  08003740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000070  080037b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080037b8  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_line   00008ede  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000081d7  00000000  00000000  00028f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001764  00000000  00000000  00031155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00086f15  00000000  00000000  00033008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000690  00000000  00000000  000b9f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016717  00000000  00000000  000ba5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023bc  00000000  00000000  000d0d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003638 	.word	0x08003638

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003638 	.word	0x08003638

080001e0 <SVC_Handler>:
  .thumb //Practically this only matters to the CPU, but it ensures that the correct types of instructions get included

  .global SVC_Handler //We need to indicate to the linker that this function exists
  .thumb_func //We need to ensure that the address of our interrupt function is properly aligned or we hard fault. a LOT
  SVC_Handler: //our function name
	TST LR, 4 //TeST the 3rd bit in LR (4 is 0b1000, so its 3rd bit is 1)
 80001e0:	f01e 0f04 	tst.w	lr, #4
	ITE EQ //If Then Equal
 80001e4:	bf0c      	ite	eq
	MRSEQ R0, MSP //If the third bit is set, we are using MSP. Set us up to use that
 80001e6:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP //Otherwise, use PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main //Go to the C function, because screw assembly
 80001ee:	f000 bb6b 	b.w	80008c8 <SVC_Handler_Main>

080001f2 <runFirstThread>:

  .global runFirstThread //Running the first thread requires some special consideration, so it is its own function
  .thumb_func
  runFirstThread:
  	//Restore MSP since we have two things on there that won't go away
  	POP {R7}
 80001f2:	bc80      	pop	{r7}
  	POP {R7}
 80001f4:	bc80      	pop	{r7}

  	//Get ready for PSP
  	MRS R0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
  	MOV LR, #0xFFFFFFFD
 80001fa:	f06f 0e02 	mvn.w	lr, #2
  	LDMIA R0!,{R4-R11}
 80001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  	MSR PSP, R0
 8000202:	f380 8809 	msr	PSP, r0
  	BX LR
 8000206:	4770      	bx	lr

08000208 <PendSV_Handler>:
	//Restore MSP since we have two things on there that won't go away
	//POP {R7}
	//POP {R7}

	//Perform the switch
	MRS R0, PSP
 8000208:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!,{R4-R11}
 800020c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BL osSched
 8000210:	f000 fba2 	bl	8000958 <osSched>
	MRS R0, PSP
 8000214:	f3ef 8009 	mrs	r0, PSP
	MOV LR, #0xFFFFFFFD
 8000218:	f06f 0e02 	mvn.w	lr, #2
	LDMIA R0!,{R4-R11}
 800021c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000220:	f380 8809 	msr	PSP, r0
	BX LR
 8000224:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <osKernelInitilize>:
// Structure holding mutex information
struct mutex{
	int avalibility;
	int timeout;
//	int timeslice;
//	int timeRunning;
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	int waitingThreadIndex;
};
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <osKernelInitilize+0x58>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <osKernelInitilize+0x58>)
 80005de:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
 80005e2:	6013      	str	r3, [r2, #0]

 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <osKernelInitilize+0x5c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <osKernelInitilize+0x5c>)
 80005ea:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 80005ee:	6013      	str	r3, [r2, #0]
// Array storing Mutexes set to a max of 10 for the TIME BEING
struct mutex mutexes[10];

 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <osKernelInitilize+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]

 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <osKernelInitilize+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
// Set up anything needed before running threads
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <osKernelInitilize+0x68>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	601a      	str	r2, [r3, #0]
void osKernelInitilize()
{
 8000604:	2300      	movs	r3, #0
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <osKernelInitilize+0x6c>)
 800060a:	6013      	str	r3, [r2, #0]
	mutexIndex = 0; //Initialize the global traker for number of mutexes being used
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <osKernelInitilize+0x6c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <osKernelInitilize+0x70>)
 8000612:	6013      	str	r3, [r2, #0]
	blockedThreadIndex = 0;

 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <osKernelInitilize+0x68>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <osKernelInitilize+0x68>)
 800061e:	6013      	str	r3, [r2, #0]
	//set the priority of PendSV to almost the weakest
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed20 	.word	0xe000ed20
 8000630:	e000ed1c 	.word	0xe000ed1c
 8000634:	200000a0 	.word	0x200000a0
 8000638:	2000009c 	.word	0x2000009c
 800063c:	20000094 	.word	0x20000094
 8000640:	20000090 	.word	0x20000090
 8000644:	2000008c 	.word	0x2000008c

08000648 <allocate_Stack>:
	SHPR3 |= 0xFE << 16; //shift the constant 0xFE 16 bits to set PendSV priority
	SHPR2 |= 0xFDU << 24; //Set the priority of SVC higher than PendSV

	//Initialize global variables
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	numThreadsRunning = 0;
	currentThreadIndex = 0;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <allocate_Stack+0x44>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000654:	da06      	bge.n	8000664 <allocate_Stack+0x1c>
	stack_pool = 0x4000; // total stack pool size

 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <allocate_Stack+0x48>)
 8000658:	f04f 32ff 	mov.w	r2, #4294967295
 800065c:	601a      	str	r2, [r3, #0]
	MSP_INIT_VAL = *(uint32_t**)0x0;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <allocate_Stack+0x48>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	e00d      	b.n	8000680 <allocate_Stack+0x38>
	stackptr = (uint32_t*)MSP_INIT_VAL; // Set stack pointer intially to MSP stack pointer location,

	stack_pool -= stack_spacing; //0x200 for MSP 0x200 for first thread
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <allocate_Stack+0x48>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <allocate_Stack+0x48>)
 800066e:	6013      	str	r3, [r2, #0]

 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <allocate_Stack+0x44>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <allocate_Stack+0x44>)
 800067a:	6013      	str	r3, [r2, #0]
//	temp_ptr = 0xBA5EBA11;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <allocate_Stack+0x48>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000094 	.word	0x20000094
 8000690:	2000008c 	.word	0x2000008c

08000694 <osCreateThread>:
		mutexes[mutexIndex].avalibility = 1;
		mutexes[mutexIndex].timeout = timeout;
//		mutexes[mutexIndex].timeRunning = timeslice;
		mutexes[index].waitingThreadIndex = -1; // Fcircular queue for waiting
		mutexIndex++;
		return true;
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	}
 800069c:	f7ff ffd4 	bl	8000648 <allocate_Stack>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b83      	ldr	r3, [pc, #524]	; (80008b4 <osCreateThread+0x220>)
 80006a6:	601a      	str	r2, [r3, #0]
	else
	{
		//Fail to create new mutex due to lack of space in OS
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <osCreateThread+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b0:	d103      	bne.n	80006ba <osCreateThread+0x26>
		return false;
	}
 80006b2:	4881      	ldr	r0, [pc, #516]	; (80008b8 <osCreateThread+0x224>)
 80006b4:	f001 ffbc 	bl	8002630 <iprintf>
}

 80006b8:	e0f9      	b.n	80008ae <osCreateThread+0x21a>
// Aquire the mutex if it is avalible
// Else wait for it to be avaliable and remove from scheudling?
void osMutexAcquire(int index)
{
 80006ba:	4b80      	ldr	r3, [pc, #512]	; (80008bc <osCreateThread+0x228>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a7d      	ldr	r2, [pc, #500]	; (80008b4 <osCreateThread+0x220>)
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	497f      	ldr	r1, [pc, #508]	; (80008c0 <osCreateThread+0x22c>)
 80006c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	if (mutexes[indexTCB].avalibility == 1){
 80006c8:	4b7c      	ldr	r3, [pc, #496]	; (80008bc <osCreateThread+0x228>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a7c      	ldr	r2, [pc, #496]	; (80008c0 <osCreateThread+0x22c>)
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	4413      	add	r3, r2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	605a      	str	r2, [r3, #4]
		arr_threads[currentThreadIndex].state = 0; // Set thread to executible
		mutexes[indexTCB].avalibility = 0;
	}
 80006d6:	4b79      	ldr	r3, [pc, #484]	; (80008bc <osCreateThread+0x228>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a79      	ldr	r2, [pc, #484]	; (80008c0 <osCreateThread+0x22c>)
 80006dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006e0:	3a04      	subs	r2, #4
 80006e2:	4977      	ldr	r1, [pc, #476]	; (80008c0 <osCreateThread+0x22c>)
 80006e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80006e8:	4a75      	ldr	r2, [pc, #468]	; (80008c0 <osCreateThread+0x22c>)
 80006ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006f2:	601a      	str	r2, [r3, #0]
	else{
 80006f4:	4b71      	ldr	r3, [pc, #452]	; (80008bc <osCreateThread+0x228>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a71      	ldr	r2, [pc, #452]	; (80008c0 <osCreateThread+0x22c>)
 80006fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006fe:	3a04      	subs	r2, #4
 8000700:	496f      	ldr	r1, [pc, #444]	; (80008c0 <osCreateThread+0x22c>)
 8000702:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000706:	4a6e      	ldr	r2, [pc, #440]	; (80008c0 <osCreateThread+0x22c>)
 8000708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
		// Wait for it to be avaliable
 8000710:	4b6a      	ldr	r3, [pc, #424]	; (80008bc <osCreateThread+0x228>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a6a      	ldr	r2, [pc, #424]	; (80008c0 <osCreateThread+0x22c>)
 8000716:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800071a:	3a04      	subs	r2, #4
 800071c:	4968      	ldr	r1, [pc, #416]	; (80008c0 <osCreateThread+0x22c>)
 800071e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000722:	4a67      	ldr	r2, [pc, #412]	; (80008c0 <osCreateThread+0x22c>)
 8000724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000728:	220a      	movs	r2, #10
 800072a:	601a      	str	r2, [r3, #0]
		arr_threads[currentThreadIndex].state = 1; //Set thread state to waiting
 800072c:	4b63      	ldr	r3, [pc, #396]	; (80008bc <osCreateThread+0x228>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a63      	ldr	r2, [pc, #396]	; (80008c0 <osCreateThread+0x22c>)
 8000732:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000736:	3a04      	subs	r2, #4
 8000738:	4961      	ldr	r1, [pc, #388]	; (80008c0 <osCreateThread+0x22c>)
 800073a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800073e:	4a60      	ldr	r2, [pc, #384]	; (80008c0 <osCreateThread+0x22c>)
 8000740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000744:	220a      	movs	r2, #10
 8000746:	601a      	str	r2, [r3, #0]
		mutexes[indexTCB].waitingThreadIndex = currentThreadIndex;
 8000748:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <osCreateThread+0x228>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a5c      	ldr	r2, [pc, #368]	; (80008c0 <osCreateThread+0x22c>)
 800074e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000752:	3a04      	subs	r2, #4
 8000754:	495a      	ldr	r1, [pc, #360]	; (80008c0 <osCreateThread+0x22c>)
 8000756:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800075a:	4a59      	ldr	r2, [pc, #356]	; (80008c0 <osCreateThread+0x22c>)
 800075c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000760:	220a      	movs	r2, #10
 8000762:	601a      	str	r2, [r3, #0]
	}
 8000764:	4b55      	ldr	r3, [pc, #340]	; (80008bc <osCreateThread+0x228>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a55      	ldr	r2, [pc, #340]	; (80008c0 <osCreateThread+0x22c>)
 800076a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800076e:	3a04      	subs	r2, #4
 8000770:	4953      	ldr	r1, [pc, #332]	; (80008c0 <osCreateThread+0x22c>)
 8000772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000776:	4a52      	ldr	r2, [pc, #328]	; (80008c0 <osCreateThread+0x22c>)
 8000778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]

 8000780:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <osCreateThread+0x228>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a4e      	ldr	r2, [pc, #312]	; (80008c0 <osCreateThread+0x22c>)
 8000786:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800078a:	3a04      	subs	r2, #4
 800078c:	494c      	ldr	r1, [pc, #304]	; (80008c0 <osCreateThread+0x22c>)
 800078e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000792:	4a4b      	ldr	r2, [pc, #300]	; (80008c0 <osCreateThread+0x22c>)
 8000794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000798:	220a      	movs	r2, #10
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	4b47      	ldr	r3, [pc, #284]	; (80008bc <osCreateThread+0x228>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a47      	ldr	r2, [pc, #284]	; (80008c0 <osCreateThread+0x22c>)
 80007a2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007a6:	3a04      	subs	r2, #4
 80007a8:	4945      	ldr	r1, [pc, #276]	; (80008c0 <osCreateThread+0x22c>)
 80007aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80007ae:	4a44      	ldr	r2, [pc, #272]	; (80008c0 <osCreateThread+0x22c>)
 80007b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007b4:	220a      	movs	r2, #10
 80007b6:	601a      	str	r2, [r3, #0]

 80007b8:	4b40      	ldr	r3, [pc, #256]	; (80008bc <osCreateThread+0x228>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <osCreateThread+0x22c>)
 80007be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007c2:	3a04      	subs	r2, #4
 80007c4:	493e      	ldr	r1, [pc, #248]	; (80008c0 <osCreateThread+0x22c>)
 80007c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80007ca:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <osCreateThread+0x22c>)
 80007cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007d0:	220a      	movs	r2, #10
 80007d2:	601a      	str	r2, [r3, #0]
// Release the mutex from it use state
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <osCreateThread+0x228>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a39      	ldr	r2, [pc, #228]	; (80008c0 <osCreateThread+0x22c>)
 80007da:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007de:	3a04      	subs	r2, #4
 80007e0:	4937      	ldr	r1, [pc, #220]	; (80008c0 <osCreateThread+0x22c>)
 80007e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80007e6:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <osCreateThread+0x22c>)
 80007e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007ec:	220a      	movs	r2, #10
 80007ee:	601a      	str	r2, [r3, #0]
void osMutexRelease(int index)
 80007f0:	4b32      	ldr	r3, [pc, #200]	; (80008bc <osCreateThread+0x228>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a32      	ldr	r2, [pc, #200]	; (80008c0 <osCreateThread+0x22c>)
 80007f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007fa:	3a04      	subs	r2, #4
 80007fc:	4930      	ldr	r1, [pc, #192]	; (80008c0 <osCreateThread+0x22c>)
 80007fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <osCreateThread+0x22c>)
 8000804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000808:	220a      	movs	r2, #10
 800080a:	601a      	str	r2, [r3, #0]
{
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <osCreateThread+0x228>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <osCreateThread+0x22c>)
 8000812:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000816:	3a04      	subs	r2, #4
 8000818:	4929      	ldr	r1, [pc, #164]	; (80008c0 <osCreateThread+0x22c>)
 800081a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800081e:	4a28      	ldr	r2, [pc, #160]	; (80008c0 <osCreateThread+0x22c>)
 8000820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000824:	220a      	movs	r2, #10
 8000826:	601a      	str	r2, [r3, #0]
	if (mutexes[index].avalibility == 0){
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <osCreateThread+0x228>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <osCreateThread+0x22c>)
 800082e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000832:	3a04      	subs	r2, #4
 8000834:	4922      	ldr	r1, [pc, #136]	; (80008c0 <osCreateThread+0x22c>)
 8000836:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <osCreateThread+0x22c>)
 800083c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000840:	220a      	movs	r2, #10
 8000842:	601a      	str	r2, [r3, #0]
			mutexes[index].avalibility = 1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <osCreateThread+0x228>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <osCreateThread+0x22c>)
 800084a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800084e:	3a04      	subs	r2, #4
 8000850:	491b      	ldr	r1, [pc, #108]	; (80008c0 <osCreateThread+0x22c>)
 8000852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <osCreateThread+0x22c>)
 8000858:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800085c:	220a      	movs	r2, #10
 800085e:	601a      	str	r2, [r3, #0]
			//CHECK TO SEE WHICH THREAD IS WAITING ON THIS VALUE IF ANY THEN ADD THAT THREAD TO SCHEDULER
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <osCreateThread+0x228>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <osCreateThread+0x22c>)
 8000866:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800086a:	3a04      	subs	r2, #4
 800086c:	4914      	ldr	r1, [pc, #80]	; (80008c0 <osCreateThread+0x22c>)
 800086e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <osCreateThread+0x22c>)
 8000874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000878:	220a      	movs	r2, #10
 800087a:	601a      	str	r2, [r3, #0]
			if(mutexes[index].waitingThreadIndex != -1){
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <osCreateThread+0x228>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <osCreateThread+0x22c>)
 8000882:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000886:	3a04      	subs	r2, #4
 8000888:	490d      	ldr	r1, [pc, #52]	; (80008c0 <osCreateThread+0x22c>)
 800088a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <osCreateThread+0x22c>)
 8000890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000894:	220a      	movs	r2, #10
 8000896:	601a      	str	r2, [r3, #0]
				arr_threads[mutexes[index].waitingThreadIndex].state = 0;
				mutexes[index].avalibility = 0;
				mutexes[index].waitingThreadIndex = -1;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <osCreateThread+0x230>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <osCreateThread+0x230>)
 80008a0:	6013      	str	r3, [r2, #0]
			}
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <osCreateThread+0x228>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <osCreateThread+0x228>)
 80008aa:	6013      	str	r3, [r2, #0]

		}
 80008ac:	bf00      	nop
		else{
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000098 	.word	0x20000098
 80008b8:	08003650 	.word	0x08003650
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	200000a4 	.word	0x200000a4
 80008c4:	200000a0 	.word	0x200000a0

080008c8 <SVC_Handler_Main>:
			// Error trying to release a mutex which is already avaliable

		}
}

//Checks to ensure that there is space remaining in the stack pool to create a new thread stack
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	//Check the stack pool to ensure it can fit another stack
	if (stack_pool - stack_spacing<0)
	{
		stackptr = (uint32_t*)-1; //Error flag //NEED TO CHANGE TO AN EXIT() or somethign similar
		return (uint32_t)stackptr;
	}
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3318      	adds	r3, #24
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b02      	subs	r3, #2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]

 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d003      	beq.n	80008ea <SVC_Handler_Main+0x22>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	d00d      	beq.n	8000904 <SVC_Handler_Main+0x3c>
//When called first create stack pointer if space in pool
//Then set up stack at that pointer
void osCreateThread(void*(fcn)(void*), void* args)
{
	threadstackptr = (uint32_t*)allocate_Stack();

 80008e8:	e015      	b.n	8000916 <SVC_Handler_Main+0x4e>
}
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <SVC_Handler_Main+0x58>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <SVC_Handler_Main+0x5c>)
 80008f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80008f4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	f383 8809 	msr	PSP, r3
}
 80008fc:	bf00      	nop

 80008fe:	f7ff fc78 	bl	80001f2 <runFirstThread>

 8000902:	e008      	b.n	8000916 <SVC_Handler_Main+0x4e>

 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <SVC_Handler_Main+0x60>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <SVC_Handler_Main+0x60>)
 800090a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090e:	6013      	str	r3, [r2, #0]
//When called first create stack pointer if space in pool
 8000910:	f3bf 8f6f 	isb	sy
//Then set up stack at that pointer
 8000914:	bf00      	nop
	// If not enough space in stack pool then return false
	if (threadstackptr==(uint32_t*)-1)
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000009c 	.word	0x2000009c
 8000924:	200000a4 	.word	0x200000a4
 8000928:	e000ed04 	.word	0xe000ed04

0800092c <osYield>:
	arr_threads[currentThreadIndex].sp = threadstackptr;
	arr_threads[currentThreadIndex].thread_function = (void(*)(void*))fcn;

	arr_threads[currentThreadIndex].timeslice = round_robin_timeout;
	arr_threads[currentThreadIndex].runtime = round_robin_timeout;

 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	arr_threads[currentThreadIndex].state = 0;
 8000930:	df07      	svc	7

 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <osKernelStart>:
	*(--arr_threads[currentThreadIndex].sp) = 1<<24; //A magic number, this is xPSR
	*(--arr_threads[currentThreadIndex].sp) = (uint32_t)fcn;//the function name (PC)
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (LR)
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (R12)
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (R3)
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (R2)
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (R1)
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <osKernelStart+0x18>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
	*(--arr_threads[currentThreadIndex].sp) = args;//0xA; // R0
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (R11)
 8000946:	df03      	svc	3
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000009c 	.word	0x2000009c

08000958 <osSched>:
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number
	*(--arr_threads[currentThreadIndex].sp) = 0xA; //An arbitrary number (R4)
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800095e:	f3ef 8309 	mrs	r3, PSP
 8000962:	603b      	str	r3, [r7, #0]
  return(result);
 8000964:	683b      	ldr	r3, [r7, #0]

	// Update the thread tracking variables
 8000966:	f1a3 0220 	sub.w	r2, r3, #32
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <osSched+0x60>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4611      	mov	r1, r2
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <osSched+0x64>)
 8000972:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	numThreadsRunning++;
	currentThreadIndex++;

 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <osSched+0x60>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <osSched+0x60>)
 800097e:	6013      	str	r3, [r2, #0]
	return true;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <osSched+0x60>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <osSched+0x68>)
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	fb93 f1f2 	sdiv	r1, r3, r2
 800098c:	fb01 f202 	mul.w	r2, r1, r2
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <osSched+0x60>)
 8000994:	6013      	str	r3, [r2, #0]
}

// User defined timeout time
void osThreadCreateWithDeadline(void*(fcn)(void*), void* args, int time)
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <osSched+0x60>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <osSched+0x64>)
 800099c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009a0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f383 8809 	msr	PSP, r3
}
 80009a8:	bf00      	nop
{
 80009aa:	bf00      	nop
	threadstackptr = (uint32_t*)allocate_Stack();
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	200000a0 	.word	0x200000a0

080009c4 <__io_putchar>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

// Lab 2 DEFINE global stack pointer ****
//uint32_t* stackptr;
//void* args = 0x0;     //REMOVE pointer
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
//#define RUN_FIRST_THREAD  0x3
 80009cc:	1d39      	adds	r1, r7, #4
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	2201      	movs	r2, #1
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <__io_putchar+0x20>)
 80009d6:	f001 fa84 	bl	8001ee2 <HAL_UART_Transmit>

 80009da:	687b      	ldr	r3, [r7, #4]
int tempval;
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000019c 	.word	0x2000019c

080009e8 <print_continuously>:
	int arg1;// = 0xBA5EBA11;
	int arg2;// = 0xBA5EBA10;
};


 // THREAD FUNCTIONS
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
 {
	 osMutexAcquire(0);
 	  //int value = *((int*)arg); //for when argument is included

 	  //Infinite print loop
 	  while(1)
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <print_continuously+0x10>)
 80009ee:	f001 fea5 	bl	800273c <puts>
 	  {
 80009f2:	f7ff ff9b 	bl	800092c <osYield>
 	  while(1)
 80009f6:	e7f9      	b.n	80009ec <print_continuously+0x4>
 80009f8:	08003670 	.word	0x08003670

080009fc <print_again>:

// 		  printf("Thread 1, %d\r\n", tempval);
 		 printf("Thread 1\r\n");
// 		 for(int i = 24926; i >= 0; i--)
//		{
//			//stall
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
//		}
 		osMutexRelease(0);
 		osYield();
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <print_again+0x10>)
 8000a02:	f001 fe9b 	bl	800273c <puts>
 	  }
 8000a06:	f7ff ff91 	bl	800092c <osYield>
 		osYield();
 8000a0a:	e7f9      	b.n	8000a00 <print_again+0x4>
 8000a0c:	0800367c 	.word	0x0800367c

08000a10 <main>:
//	tempval++;



 	while(1)
 	{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
 		for(int i = 23000; i >= 0; i--)
 		{
 			//stall
 		}
// 		osYield();
 	}
 8000a14:	f000 fa8a 	bl	8000f2c <HAL_Init>


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 8000a18:	f000 f814 	bl	8000a44 <SystemClock_Config>
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
 8000a1c:	f000 f8a6 	bl	8000b6c <MX_GPIO_Init>
int main(void)
 8000a20:	f000 f87a 	bl	8000b18 <MX_USART2_UART_Init>
{
  /* USER CODE BEGIN 1 */



 8000a24:	f7ff fdd6 	bl	80005d4 <osKernelInitilize>
  /* USER CODE END 1 */

 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <main+0x2c>)
 8000a2a:	f7ff fe33 	bl	8000694 <osCreateThread>
  /* MCU Configuration--------------------------------------------------------*/

 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <main+0x30>)
 8000a30:	f7ff fe30 	bl	8000694 <osCreateThread>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

 8000a34:	f7ff ff82 	bl	800093c <osKernelStart>
  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
 8000a38:	e7fe      	b.n	8000a38 <main+0x28>
 8000a3a:	bf00      	nop
 8000a3c:	080009e9 	.word	0x080009e9
 8000a40:	080009fd 	.word	0x080009fd

08000a44 <SystemClock_Config>:
  arguments.arg2 = 0xBA5EBA10;

// Call the kernel.c functions
  osKernelInitilize();

  // Create any mutexes
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  osCreateMutex(20);
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	; 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fde4 	bl	8002620 <memset>
  osCreateMutex(15);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  osThreadCreateWithDeadline(print_continuously, 0, 5);
  osThreadCreateWithDeadline(thread_function, &arguments, 5);

 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
//  osCreateThread(print_again);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
//  osCreateThread(thread_function, &x);

//  osThreadCreateWithDeadline(thread_function, &arguments, 100);


 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
 // printf("Thread2 Init\r\n");
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

 8000aa8:	2310      	movs	r3, #16
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  osKernelStart();
 8000aac:	2302      	movs	r3, #2
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
 // printf("kernel started\r\n");
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE BEGIN 2 */
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40

 8000ab8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000abc:	647b      	str	r3, [r7, #68]	; 0x44

 8000abe:	2304      	movs	r3, #4
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48

 8000ac2:	2304      	movs	r3, #4
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 2 */
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fd24 	bl	8001518 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x96>

  /* Infinite loop */
 8000ad6:	f000 f8b7 	bl	8000c48 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

 8000ada:	230f      	movs	r3, #15
 8000adc:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN 3 */
  }
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  /* USER CODE END 3 */
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
}
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	61bb      	str	r3, [r7, #24]

 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
/**
  * @brief System Clock Configuration
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 ff86 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xc2>
  * @retval None
  */
 8000b02:	f000 f8a1 	bl	8000c48 <Error_Handler>
void SystemClock_Config(void)
{
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_USART2_UART_Init>:

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART2_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  {
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
    Error_Handler();
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  }
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]

 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f001 f97a 	bl	8001e48 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x46>
  /** Initializes the CPU, AHB and APB buses clocks
  */
 8000b5a:	f000 f875 	bl	8000c48 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000019c 	.word	0x2000019c
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  {
    Error_Handler();
  }
}

/**
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
  * @brief USART2 Initialization Function
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USART2_Init 0 */
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]

 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <MX_GPIO_Init+0xd4>)
 8000bf8:	f000 fc74 	bl	80014e4 <HAL_GPIO_WritePin>

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	617b      	str	r3, [r7, #20]
  huart2.Init.BaudRate = 115200;
 8000c02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c06:	61bb      	str	r3, [r7, #24]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_GPIO_Init+0xd8>)
 8000c14:	f000 fae2 	bl	80011dc <HAL_GPIO_Init>
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	617b      	str	r3, [r7, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  {
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
    Error_Handler();
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_GPIO_Init+0xd4>)
 8000c30:	f000 fad4 	bl	80011dc <HAL_GPIO_Init>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020800 	.word	0x40020800

08000c48 <Error_Handler>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c92:	2007      	movs	r0, #7
 8000c94:	f000 fa6e 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f000 fa5f 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <DebugMon_Handler>:
//  /* USER CODE BEGIN SVCall_IRQn 1 */
//
//  /* USER CODE END SVCall_IRQn 1 */
//}

/**
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
//}

/**
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	f000 f934 	bl	8000fd0 <HAL_IncTick>
	HAL_IncTick();

	if (arr_threads[currentThreadIndex].runtime == 0)
	{
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e00a      	b.n	8000d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d7e:	f3af 8000 	nop.w
 8000d82:	4601      	mov	r1, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf0      	blt.n	8000d7e <_read+0x12>
  }

  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e009      	b.n	8000dcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fdff 	bl	80009c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf1      	blt.n	8000db8 <_write+0x12>
  }
  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_close>:

int _close(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e06:	605a      	str	r2, [r3, #4]
  return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_isatty>:

int _isatty(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f001 fba8 	bl	80025cc <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20020000 	.word	0x20020000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	200001e0 	.word	0x200001e0
 8000eb0:	200001f8 	.word	0x200001f8

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd7 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f001 fb67 	bl	80025d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fd81 	bl	8000a10 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f1c:	08003748 	.word	0x08003748
  ldr r2, =_sbss
 8000f20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f24:	200001f8 	.word	0x200001f8

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f90d 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fe78 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f917 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f8ed 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200001e4 	.word	0x200001e4

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200001e4 	.word	0x200001e4

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff5c 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffb0 	bl	8001130 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e159      	b.n	80014ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8148 	bne.w	80014a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a2 	beq.w	80014a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_GPIO_Init+0x2ec>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a49      	ldr	r2, [pc, #292]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x202>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a48      	ldr	r2, [pc, #288]	; (80014d0 <HAL_GPIO_Init+0x2f4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1fe>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_GPIO_Init+0x2f8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <HAL_GPIO_Init+0x2fc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1f6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a45      	ldr	r2, [pc, #276]	; (80014dc <HAL_GPIO_Init+0x300>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1f2>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2ec>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001476:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_GPIO_Init+0x304>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f aea2 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e267      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b7e      	ldr	r3, [pc, #504]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e242      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6f      	ldr	r2, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fd12 	bl	8000ff8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fd0e 	bl	8000ff8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e207      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fcfe 	bl	8000ff8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fcfa 	bl	8000ff8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1f3      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b51      	ldr	r3, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1c7      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_OscConfig+0x244>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fcb3 	bl	8000ff8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fcaf 	bl	8000ff8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1a8      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4925      	ldr	r1, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x244>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc92 	bl	8000ff8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc8e 	bl	8000ff8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e187      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d036      	beq.n	8001770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fc72 	bl	8000ff8 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fc6e 	bl	8000ff8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e167      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e01b      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fc5b 	bl	8000ff8 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e00e      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fc57 	bl	8000ff8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d907      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e150      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	42470000 	.word	0x42470000
 8001760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ea      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8097 	beq.w	80018ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b77      	ldr	r3, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b74      	ldr	r3, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a73      	ldr	r2, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fc17 	bl	8000ff8 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fc13 	bl	8000ff8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x2ea>
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x30c>
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d015      	beq.n	8001870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fbd8 	bl	8000ff8 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff fbd4 	bl	8000ff8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0cb      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ee      	beq.n	800184c <HAL_RCC_OscConfig+0x334>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff fbc2 	bl	8000ff8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fbbe 	bl	8000ff8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0b5      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ee      	bne.n	8001878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a1 	beq.w	80019f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d05c      	beq.n	800197c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d141      	bne.n	800194e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fb92 	bl	8000ff8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fb8e 	bl	8000ff8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e087      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb67 	bl	8000ff8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fb63 	bl	8000ff8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e05c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x416>
 800194c:	e054      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fb50 	bl	8000ff8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fb4c 	bl	8000ff8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e038      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4ec>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d028      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d121      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d90c      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d044      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4934      	ldr	r1, [pc, #208]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa7e 	bl	8000ff8 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff fa7a 	bl	8000ff8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e04f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f9de 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08003688 	.word	0x08003688
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd8:	b094      	sub	sp, #80	; 0x50
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80e1 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e0db      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c0c:	e0db      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c12:	e0d8      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
 8001c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c46:	4622      	mov	r2, r4
 8001c48:	462b      	mov	r3, r5
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0159      	lsls	r1, r3, #5
 8001c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c58:	0150      	lsls	r0, r2, #5
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4621      	mov	r1, r4
 8001c60:	1a51      	subs	r1, r2, r1
 8001c62:	6139      	str	r1, [r7, #16]
 8001c64:	4629      	mov	r1, r5
 8001c66:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c78:	4659      	mov	r1, fp
 8001c7a:	018b      	lsls	r3, r1, #6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c82:	4651      	mov	r1, sl
 8001c84:	018a      	lsls	r2, r1, #6
 8001c86:	4651      	mov	r1, sl
 8001c88:	ebb2 0801 	subs.w	r8, r2, r1
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	eb18 0303 	adds.w	r3, r8, r3
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	eb49 0303 	adc.w	r3, r9, r3
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	024b      	lsls	r3, r1, #9
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	024a      	lsls	r2, r1, #9
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce4:	f7fe faf4 	bl	80002d0 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0159      	lsls	r1, r3, #5
 8001d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1e:	0150      	lsls	r0, r2, #5
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4641      	mov	r1, r8
 8001d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d44:	ebb2 040a 	subs.w	r4, r2, sl
 8001d48:	eb63 050b 	sbc.w	r5, r3, fp
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	464b      	mov	r3, r9
 8001d68:	eb45 0303 	adc.w	r3, r5, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	61fa      	str	r2, [r7, #28]
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	f7fe fa9a 	bl	80002d0 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3750      	adds	r7, #80	; 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08003698 	.word	0x08003698

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08003698 	.word	0x08003698

08001e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e03f      	b.n	8001eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe ff18 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f929 	bl	80020e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b08a      	sub	sp, #40	; 0x28
 8001ee6:	af02      	add	r7, sp, #8
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d17c      	bne.n	8001ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_UART_Transmit+0x2c>
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e075      	b.n	8001ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_UART_Transmit+0x3e>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e06e      	b.n	8001ffe <HAL_UART_Transmit+0x11c>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2221      	movs	r2, #33	; 0x21
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f36:	f7ff f85f 	bl	8000ff8 <HAL_GetTick>
 8001f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	88fa      	ldrh	r2, [r7, #6]
 8001f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f50:	d108      	bne.n	8001f64 <HAL_UART_Transmit+0x82>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	e003      	b.n	8001f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f74:	e02a      	b.n	8001fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f840 	bl	8002006 <UART_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e036      	b.n	8001ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e007      	b.n	8001fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1cf      	bne.n	8001f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f810 	bl	8002006 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e006      	b.n	8001ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b090      	sub	sp, #64	; 0x40
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	4613      	mov	r3, r2
 8002014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002016:	e050      	b.n	80020ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d04c      	beq.n	80020ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <UART_WaitOnFlagUntilTimeout+0x30>
 8002026:	f7fe ffe7 	bl	8000ff8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002032:	429a      	cmp	r2, r3
 8002034:	d241      	bcs.n	80020ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	e853 3f00 	ldrex	r3, [r3]
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	330c      	adds	r3, #12
 8002054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002056:	637a      	str	r2, [r7, #52]	; 0x34
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800205c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800205e:	e841 2300 	strex	r3, r2, [r1]
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1e5      	bne.n	8002036 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3314      	adds	r3, #20
 8002070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	e853 3f00 	ldrex	r3, [r3]
 8002078:	613b      	str	r3, [r7, #16]
   return(result);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3314      	adds	r3, #20
 8002088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800208a:	623a      	str	r2, [r7, #32]
 800208c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208e:	69f9      	ldr	r1, [r7, #28]
 8002090:	6a3a      	ldr	r2, [r7, #32]
 8002092:	e841 2300 	strex	r3, r2, [r1]
 8002096:	61bb      	str	r3, [r7, #24]
   return(result);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e5      	bne.n	800206a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e00f      	b.n	80020da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4013      	ands	r3, r2
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d09f      	beq.n	8002018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3740      	adds	r7, #64	; 0x40
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e8:	b0c0      	sub	sp, #256	; 0x100
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	ea40 0301 	orr.w	r3, r0, r1
 800210c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	431a      	orrs	r2, r3
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	431a      	orrs	r2, r3
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800213c:	f021 010c 	bic.w	r1, r1, #12
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800214a:	430b      	orrs	r3, r1
 800214c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800214e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215e:	6999      	ldr	r1, [r3, #24]
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	ea40 0301 	orr.w	r3, r0, r1
 800216a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <UART_SetConfig+0x2cc>)
 8002174:	429a      	cmp	r2, r3
 8002176:	d005      	beq.n	8002184 <UART_SetConfig+0xa0>
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <UART_SetConfig+0x2d0>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d104      	bne.n	800218e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002184:	f7ff fe4c 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800218c:	e003      	b.n	8002196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800218e:	f7ff fe33 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8002192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a0:	f040 810c 	bne.w	80023bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021b6:	4622      	mov	r2, r4
 80021b8:	462b      	mov	r3, r5
 80021ba:	1891      	adds	r1, r2, r2
 80021bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80021be:	415b      	adcs	r3, r3
 80021c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021c6:	4621      	mov	r1, r4
 80021c8:	eb12 0801 	adds.w	r8, r2, r1
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb43 0901 	adc.w	r9, r3, r1
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021e6:	4690      	mov	r8, r2
 80021e8:	4699      	mov	r9, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	eb18 0303 	adds.w	r3, r8, r3
 80021f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021f4:	462b      	mov	r3, r5
 80021f6:	eb49 0303 	adc.w	r3, r9, r3
 80021fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800220a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800220e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002212:	460b      	mov	r3, r1
 8002214:	18db      	adds	r3, r3, r3
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
 8002218:	4613      	mov	r3, r2
 800221a:	eb42 0303 	adc.w	r3, r2, r3
 800221e:	657b      	str	r3, [r7, #84]	; 0x54
 8002220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002228:	f7fe f852 	bl	80002d0 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <UART_SetConfig+0x2d4>)
 8002232:	fba3 2302 	umull	r2, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	011c      	lsls	r4, r3, #4
 800223a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800223e:	2200      	movs	r2, #0
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800224c:	4642      	mov	r2, r8
 800224e:	464b      	mov	r3, r9
 8002250:	1891      	adds	r1, r2, r2
 8002252:	64b9      	str	r1, [r7, #72]	; 0x48
 8002254:	415b      	adcs	r3, r3
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800225c:	4641      	mov	r1, r8
 800225e:	eb12 0a01 	adds.w	sl, r2, r1
 8002262:	4649      	mov	r1, r9
 8002264:	eb43 0b01 	adc.w	fp, r3, r1
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800227c:	4692      	mov	sl, r2
 800227e:	469b      	mov	fp, r3
 8002280:	4643      	mov	r3, r8
 8002282:	eb1a 0303 	adds.w	r3, sl, r3
 8002286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800228a:	464b      	mov	r3, r9
 800228c:	eb4b 0303 	adc.w	r3, fp, r3
 8002290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022a8:	460b      	mov	r3, r1
 80022aa:	18db      	adds	r3, r3, r3
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
 80022ae:	4613      	mov	r3, r2
 80022b0:	eb42 0303 	adc.w	r3, r2, r3
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
 80022b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022be:	f7fe f807 	bl	80002d0 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <UART_SetConfig+0x2d4>)
 80022ca:	fba3 2301 	umull	r2, r3, r3, r1
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2264      	movs	r2, #100	; 0x64
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	1acb      	subs	r3, r1, r3
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <UART_SetConfig+0x2d4>)
 80022e0:	fba3 2302 	umull	r2, r3, r3, r2
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022ec:	441c      	add	r4, r3
 80022ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	1891      	adds	r1, r2, r2
 8002306:	63b9      	str	r1, [r7, #56]	; 0x38
 8002308:	415b      	adcs	r3, r3
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002310:	4641      	mov	r1, r8
 8002312:	1851      	adds	r1, r2, r1
 8002314:	6339      	str	r1, [r7, #48]	; 0x30
 8002316:	4649      	mov	r1, r9
 8002318:	414b      	adcs	r3, r1
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002328:	4659      	mov	r1, fp
 800232a:	00cb      	lsls	r3, r1, #3
 800232c:	4651      	mov	r1, sl
 800232e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002332:	4651      	mov	r1, sl
 8002334:	00ca      	lsls	r2, r1, #3
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	4603      	mov	r3, r0
 800233c:	4642      	mov	r2, r8
 800233e:	189b      	adds	r3, r3, r2
 8002340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002344:	464b      	mov	r3, r9
 8002346:	460a      	mov	r2, r1
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800235c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002364:	460b      	mov	r3, r1
 8002366:	18db      	adds	r3, r3, r3
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	4613      	mov	r3, r2
 800236c:	eb42 0303 	adc.w	r3, r2, r3
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800237a:	f7fd ffa9 	bl	80002d0 <__aeabi_uldivmod>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <UART_SetConfig+0x2d4>)
 8002384:	fba3 1302 	umull	r1, r3, r3, r2
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	2164      	movs	r1, #100	; 0x64
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	3332      	adds	r3, #50	; 0x32
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <UART_SetConfig+0x2d4>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	f003 0207 	and.w	r2, r3, #7
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4422      	add	r2, r4
 80023aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023ac:	e105      	b.n	80025ba <UART_SetConfig+0x4d6>
 80023ae:	bf00      	nop
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40011400 	.word	0x40011400
 80023b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023ce:	4642      	mov	r2, r8
 80023d0:	464b      	mov	r3, r9
 80023d2:	1891      	adds	r1, r2, r2
 80023d4:	6239      	str	r1, [r7, #32]
 80023d6:	415b      	adcs	r3, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023de:	4641      	mov	r1, r8
 80023e0:	1854      	adds	r4, r2, r1
 80023e2:	4649      	mov	r1, r9
 80023e4:	eb43 0501 	adc.w	r5, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	00eb      	lsls	r3, r5, #3
 80023f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023f6:	00e2      	lsls	r2, r4, #3
 80023f8:	4614      	mov	r4, r2
 80023fa:	461d      	mov	r5, r3
 80023fc:	4643      	mov	r3, r8
 80023fe:	18e3      	adds	r3, r4, r3
 8002400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002404:	464b      	mov	r3, r9
 8002406:	eb45 0303 	adc.w	r3, r5, r3
 800240a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800241a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800242a:	4629      	mov	r1, r5
 800242c:	008b      	lsls	r3, r1, #2
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002434:	4621      	mov	r1, r4
 8002436:	008a      	lsls	r2, r1, #2
 8002438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800243c:	f7fd ff48 	bl	80002d0 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <UART_SetConfig+0x4e4>)
 8002446:	fba3 2302 	umull	r2, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	011c      	lsls	r4, r3, #4
 800244e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800245c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	1891      	adds	r1, r2, r2
 8002466:	61b9      	str	r1, [r7, #24]
 8002468:	415b      	adcs	r3, r3
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002470:	4641      	mov	r1, r8
 8002472:	1851      	adds	r1, r2, r1
 8002474:	6139      	str	r1, [r7, #16]
 8002476:	4649      	mov	r1, r9
 8002478:	414b      	adcs	r3, r1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002488:	4659      	mov	r1, fp
 800248a:	00cb      	lsls	r3, r1, #3
 800248c:	4651      	mov	r1, sl
 800248e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002492:	4651      	mov	r1, sl
 8002494:	00ca      	lsls	r2, r1, #3
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	4603      	mov	r3, r0
 800249c:	4642      	mov	r2, r8
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024a4:	464b      	mov	r3, r9
 80024a6:	460a      	mov	r2, r1
 80024a8:	eb42 0303 	adc.w	r3, r2, r3
 80024ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024c8:	4649      	mov	r1, r9
 80024ca:	008b      	lsls	r3, r1, #2
 80024cc:	4641      	mov	r1, r8
 80024ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d2:	4641      	mov	r1, r8
 80024d4:	008a      	lsls	r2, r1, #2
 80024d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024da:	f7fd fef9 	bl	80002d0 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <UART_SetConfig+0x4e4>)
 80024e4:	fba3 1302 	umull	r1, r3, r3, r2
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	2164      	movs	r1, #100	; 0x64
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	3332      	adds	r3, #50	; 0x32
 80024f6:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <UART_SetConfig+0x4e4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002502:	441c      	add	r4, r3
 8002504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002508:	2200      	movs	r2, #0
 800250a:	673b      	str	r3, [r7, #112]	; 0x70
 800250c:	677a      	str	r2, [r7, #116]	; 0x74
 800250e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002512:	4642      	mov	r2, r8
 8002514:	464b      	mov	r3, r9
 8002516:	1891      	adds	r1, r2, r2
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	415b      	adcs	r3, r3
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002522:	4641      	mov	r1, r8
 8002524:	1851      	adds	r1, r2, r1
 8002526:	6039      	str	r1, [r7, #0]
 8002528:	4649      	mov	r1, r9
 800252a:	414b      	adcs	r3, r1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800253a:	4659      	mov	r1, fp
 800253c:	00cb      	lsls	r3, r1, #3
 800253e:	4651      	mov	r1, sl
 8002540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002544:	4651      	mov	r1, sl
 8002546:	00ca      	lsls	r2, r1, #3
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	4603      	mov	r3, r0
 800254e:	4642      	mov	r2, r8
 8002550:	189b      	adds	r3, r3, r2
 8002552:	66bb      	str	r3, [r7, #104]	; 0x68
 8002554:	464b      	mov	r3, r9
 8002556:	460a      	mov	r2, r1
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	663b      	str	r3, [r7, #96]	; 0x60
 8002568:	667a      	str	r2, [r7, #100]	; 0x64
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002576:	4649      	mov	r1, r9
 8002578:	008b      	lsls	r3, r1, #2
 800257a:	4641      	mov	r1, r8
 800257c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002580:	4641      	mov	r1, r8
 8002582:	008a      	lsls	r2, r1, #2
 8002584:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002588:	f7fd fea2 	bl	80002d0 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <UART_SetConfig+0x4e4>)
 8002592:	fba3 1302 	umull	r1, r3, r3, r2
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2164      	movs	r1, #100	; 0x64
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	; 0x32
 80025a4:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <UART_SetConfig+0x4e4>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 020f 	and.w	r2, r3, #15
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4422      	add	r2, r4
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	bf00      	nop
 80025bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c6:	bf00      	nop
 80025c8:	51eb851f 	.word	0x51eb851f

080025cc <__errno>:
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <__errno+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <__libc_init_array>:
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	4d0d      	ldr	r5, [pc, #52]	; (8002610 <__libc_init_array+0x38>)
 80025dc:	4c0d      	ldr	r4, [pc, #52]	; (8002614 <__libc_init_array+0x3c>)
 80025de:	1b64      	subs	r4, r4, r5
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	2600      	movs	r6, #0
 80025e4:	42a6      	cmp	r6, r4
 80025e6:	d109      	bne.n	80025fc <__libc_init_array+0x24>
 80025e8:	4d0b      	ldr	r5, [pc, #44]	; (8002618 <__libc_init_array+0x40>)
 80025ea:	4c0c      	ldr	r4, [pc, #48]	; (800261c <__libc_init_array+0x44>)
 80025ec:	f001 f824 	bl	8003638 <_init>
 80025f0:	1b64      	subs	r4, r4, r5
 80025f2:	10a4      	asrs	r4, r4, #2
 80025f4:	2600      	movs	r6, #0
 80025f6:	42a6      	cmp	r6, r4
 80025f8:	d105      	bne.n	8002606 <__libc_init_array+0x2e>
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002600:	4798      	blx	r3
 8002602:	3601      	adds	r6, #1
 8002604:	e7ee      	b.n	80025e4 <__libc_init_array+0xc>
 8002606:	f855 3b04 	ldr.w	r3, [r5], #4
 800260a:	4798      	blx	r3
 800260c:	3601      	adds	r6, #1
 800260e:	e7f2      	b.n	80025f6 <__libc_init_array+0x1e>
 8002610:	08003740 	.word	0x08003740
 8002614:	08003740 	.word	0x08003740
 8002618:	08003740 	.word	0x08003740
 800261c:	08003744 	.word	0x08003744

08002620 <memset>:
 8002620:	4402      	add	r2, r0
 8002622:	4603      	mov	r3, r0
 8002624:	4293      	cmp	r3, r2
 8002626:	d100      	bne.n	800262a <memset+0xa>
 8002628:	4770      	bx	lr
 800262a:	f803 1b01 	strb.w	r1, [r3], #1
 800262e:	e7f9      	b.n	8002624 <memset+0x4>

08002630 <iprintf>:
 8002630:	b40f      	push	{r0, r1, r2, r3}
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <iprintf+0x2c>)
 8002634:	b513      	push	{r0, r1, r4, lr}
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	b124      	cbz	r4, 8002644 <iprintf+0x14>
 800263a:	69a3      	ldr	r3, [r4, #24]
 800263c:	b913      	cbnz	r3, 8002644 <iprintf+0x14>
 800263e:	4620      	mov	r0, r4
 8002640:	f000 fa5e 	bl	8002b00 <__sinit>
 8002644:	ab05      	add	r3, sp, #20
 8002646:	9a04      	ldr	r2, [sp, #16]
 8002648:	68a1      	ldr	r1, [r4, #8]
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	4620      	mov	r0, r4
 800264e:	f000 fc67 	bl	8002f20 <_vfiprintf_r>
 8002652:	b002      	add	sp, #8
 8002654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002658:	b004      	add	sp, #16
 800265a:	4770      	bx	lr
 800265c:	2000000c 	.word	0x2000000c

08002660 <_puts_r>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	460e      	mov	r6, r1
 8002664:	4605      	mov	r5, r0
 8002666:	b118      	cbz	r0, 8002670 <_puts_r+0x10>
 8002668:	6983      	ldr	r3, [r0, #24]
 800266a:	b90b      	cbnz	r3, 8002670 <_puts_r+0x10>
 800266c:	f000 fa48 	bl	8002b00 <__sinit>
 8002670:	69ab      	ldr	r3, [r5, #24]
 8002672:	68ac      	ldr	r4, [r5, #8]
 8002674:	b913      	cbnz	r3, 800267c <_puts_r+0x1c>
 8002676:	4628      	mov	r0, r5
 8002678:	f000 fa42 	bl	8002b00 <__sinit>
 800267c:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <_puts_r+0xd0>)
 800267e:	429c      	cmp	r4, r3
 8002680:	d120      	bne.n	80026c4 <_puts_r+0x64>
 8002682:	686c      	ldr	r4, [r5, #4]
 8002684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002686:	07db      	lsls	r3, r3, #31
 8002688:	d405      	bmi.n	8002696 <_puts_r+0x36>
 800268a:	89a3      	ldrh	r3, [r4, #12]
 800268c:	0598      	lsls	r0, r3, #22
 800268e:	d402      	bmi.n	8002696 <_puts_r+0x36>
 8002690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002692:	f000 fad3 	bl	8002c3c <__retarget_lock_acquire_recursive>
 8002696:	89a3      	ldrh	r3, [r4, #12]
 8002698:	0719      	lsls	r1, r3, #28
 800269a:	d51d      	bpl.n	80026d8 <_puts_r+0x78>
 800269c:	6923      	ldr	r3, [r4, #16]
 800269e:	b1db      	cbz	r3, 80026d8 <_puts_r+0x78>
 80026a0:	3e01      	subs	r6, #1
 80026a2:	68a3      	ldr	r3, [r4, #8]
 80026a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60a3      	str	r3, [r4, #8]
 80026ac:	bb39      	cbnz	r1, 80026fe <_puts_r+0x9e>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	da38      	bge.n	8002724 <_puts_r+0xc4>
 80026b2:	4622      	mov	r2, r4
 80026b4:	210a      	movs	r1, #10
 80026b6:	4628      	mov	r0, r5
 80026b8:	f000 f848 	bl	800274c <__swbuf_r>
 80026bc:	3001      	adds	r0, #1
 80026be:	d011      	beq.n	80026e4 <_puts_r+0x84>
 80026c0:	250a      	movs	r5, #10
 80026c2:	e011      	b.n	80026e8 <_puts_r+0x88>
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <_puts_r+0xd4>)
 80026c6:	429c      	cmp	r4, r3
 80026c8:	d101      	bne.n	80026ce <_puts_r+0x6e>
 80026ca:	68ac      	ldr	r4, [r5, #8]
 80026cc:	e7da      	b.n	8002684 <_puts_r+0x24>
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <_puts_r+0xd8>)
 80026d0:	429c      	cmp	r4, r3
 80026d2:	bf08      	it	eq
 80026d4:	68ec      	ldreq	r4, [r5, #12]
 80026d6:	e7d5      	b.n	8002684 <_puts_r+0x24>
 80026d8:	4621      	mov	r1, r4
 80026da:	4628      	mov	r0, r5
 80026dc:	f000 f888 	bl	80027f0 <__swsetup_r>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d0dd      	beq.n	80026a0 <_puts_r+0x40>
 80026e4:	f04f 35ff 	mov.w	r5, #4294967295
 80026e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ea:	07da      	lsls	r2, r3, #31
 80026ec:	d405      	bmi.n	80026fa <_puts_r+0x9a>
 80026ee:	89a3      	ldrh	r3, [r4, #12]
 80026f0:	059b      	lsls	r3, r3, #22
 80026f2:	d402      	bmi.n	80026fa <_puts_r+0x9a>
 80026f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026f6:	f000 faa2 	bl	8002c3e <__retarget_lock_release_recursive>
 80026fa:	4628      	mov	r0, r5
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da04      	bge.n	800270c <_puts_r+0xac>
 8002702:	69a2      	ldr	r2, [r4, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	dc06      	bgt.n	8002716 <_puts_r+0xb6>
 8002708:	290a      	cmp	r1, #10
 800270a:	d004      	beq.n	8002716 <_puts_r+0xb6>
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	6022      	str	r2, [r4, #0]
 8002712:	7019      	strb	r1, [r3, #0]
 8002714:	e7c5      	b.n	80026a2 <_puts_r+0x42>
 8002716:	4622      	mov	r2, r4
 8002718:	4628      	mov	r0, r5
 800271a:	f000 f817 	bl	800274c <__swbuf_r>
 800271e:	3001      	adds	r0, #1
 8002720:	d1bf      	bne.n	80026a2 <_puts_r+0x42>
 8002722:	e7df      	b.n	80026e4 <_puts_r+0x84>
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	250a      	movs	r5, #10
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	6022      	str	r2, [r4, #0]
 800272c:	701d      	strb	r5, [r3, #0]
 800272e:	e7db      	b.n	80026e8 <_puts_r+0x88>
 8002730:	080036c4 	.word	0x080036c4
 8002734:	080036e4 	.word	0x080036e4
 8002738:	080036a4 	.word	0x080036a4

0800273c <puts>:
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <puts+0xc>)
 800273e:	4601      	mov	r1, r0
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	f7ff bf8d 	b.w	8002660 <_puts_r>
 8002746:	bf00      	nop
 8002748:	2000000c 	.word	0x2000000c

0800274c <__swbuf_r>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	460e      	mov	r6, r1
 8002750:	4614      	mov	r4, r2
 8002752:	4605      	mov	r5, r0
 8002754:	b118      	cbz	r0, 800275e <__swbuf_r+0x12>
 8002756:	6983      	ldr	r3, [r0, #24]
 8002758:	b90b      	cbnz	r3, 800275e <__swbuf_r+0x12>
 800275a:	f000 f9d1 	bl	8002b00 <__sinit>
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <__swbuf_r+0x98>)
 8002760:	429c      	cmp	r4, r3
 8002762:	d12b      	bne.n	80027bc <__swbuf_r+0x70>
 8002764:	686c      	ldr	r4, [r5, #4]
 8002766:	69a3      	ldr	r3, [r4, #24]
 8002768:	60a3      	str	r3, [r4, #8]
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	071a      	lsls	r2, r3, #28
 800276e:	d52f      	bpl.n	80027d0 <__swbuf_r+0x84>
 8002770:	6923      	ldr	r3, [r4, #16]
 8002772:	b36b      	cbz	r3, 80027d0 <__swbuf_r+0x84>
 8002774:	6923      	ldr	r3, [r4, #16]
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	1ac0      	subs	r0, r0, r3
 800277a:	6963      	ldr	r3, [r4, #20]
 800277c:	b2f6      	uxtb	r6, r6
 800277e:	4283      	cmp	r3, r0
 8002780:	4637      	mov	r7, r6
 8002782:	dc04      	bgt.n	800278e <__swbuf_r+0x42>
 8002784:	4621      	mov	r1, r4
 8002786:	4628      	mov	r0, r5
 8002788:	f000 f926 	bl	80029d8 <_fflush_r>
 800278c:	bb30      	cbnz	r0, 80027dc <__swbuf_r+0x90>
 800278e:	68a3      	ldr	r3, [r4, #8]
 8002790:	3b01      	subs	r3, #1
 8002792:	60a3      	str	r3, [r4, #8]
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	6022      	str	r2, [r4, #0]
 800279a:	701e      	strb	r6, [r3, #0]
 800279c:	6963      	ldr	r3, [r4, #20]
 800279e:	3001      	adds	r0, #1
 80027a0:	4283      	cmp	r3, r0
 80027a2:	d004      	beq.n	80027ae <__swbuf_r+0x62>
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	07db      	lsls	r3, r3, #31
 80027a8:	d506      	bpl.n	80027b8 <__swbuf_r+0x6c>
 80027aa:	2e0a      	cmp	r6, #10
 80027ac:	d104      	bne.n	80027b8 <__swbuf_r+0x6c>
 80027ae:	4621      	mov	r1, r4
 80027b0:	4628      	mov	r0, r5
 80027b2:	f000 f911 	bl	80029d8 <_fflush_r>
 80027b6:	b988      	cbnz	r0, 80027dc <__swbuf_r+0x90>
 80027b8:	4638      	mov	r0, r7
 80027ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <__swbuf_r+0x9c>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d101      	bne.n	80027c6 <__swbuf_r+0x7a>
 80027c2:	68ac      	ldr	r4, [r5, #8]
 80027c4:	e7cf      	b.n	8002766 <__swbuf_r+0x1a>
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <__swbuf_r+0xa0>)
 80027c8:	429c      	cmp	r4, r3
 80027ca:	bf08      	it	eq
 80027cc:	68ec      	ldreq	r4, [r5, #12]
 80027ce:	e7ca      	b.n	8002766 <__swbuf_r+0x1a>
 80027d0:	4621      	mov	r1, r4
 80027d2:	4628      	mov	r0, r5
 80027d4:	f000 f80c 	bl	80027f0 <__swsetup_r>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d0cb      	beq.n	8002774 <__swbuf_r+0x28>
 80027dc:	f04f 37ff 	mov.w	r7, #4294967295
 80027e0:	e7ea      	b.n	80027b8 <__swbuf_r+0x6c>
 80027e2:	bf00      	nop
 80027e4:	080036c4 	.word	0x080036c4
 80027e8:	080036e4 	.word	0x080036e4
 80027ec:	080036a4 	.word	0x080036a4

080027f0 <__swsetup_r>:
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <__swsetup_r+0xcc>)
 80027f2:	b570      	push	{r4, r5, r6, lr}
 80027f4:	681d      	ldr	r5, [r3, #0]
 80027f6:	4606      	mov	r6, r0
 80027f8:	460c      	mov	r4, r1
 80027fa:	b125      	cbz	r5, 8002806 <__swsetup_r+0x16>
 80027fc:	69ab      	ldr	r3, [r5, #24]
 80027fe:	b913      	cbnz	r3, 8002806 <__swsetup_r+0x16>
 8002800:	4628      	mov	r0, r5
 8002802:	f000 f97d 	bl	8002b00 <__sinit>
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <__swsetup_r+0xd0>)
 8002808:	429c      	cmp	r4, r3
 800280a:	d10f      	bne.n	800282c <__swsetup_r+0x3c>
 800280c:	686c      	ldr	r4, [r5, #4]
 800280e:	89a3      	ldrh	r3, [r4, #12]
 8002810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002814:	0719      	lsls	r1, r3, #28
 8002816:	d42c      	bmi.n	8002872 <__swsetup_r+0x82>
 8002818:	06dd      	lsls	r5, r3, #27
 800281a:	d411      	bmi.n	8002840 <__swsetup_r+0x50>
 800281c:	2309      	movs	r3, #9
 800281e:	6033      	str	r3, [r6, #0]
 8002820:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002824:	81a3      	strh	r3, [r4, #12]
 8002826:	f04f 30ff 	mov.w	r0, #4294967295
 800282a:	e03e      	b.n	80028aa <__swsetup_r+0xba>
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <__swsetup_r+0xd4>)
 800282e:	429c      	cmp	r4, r3
 8002830:	d101      	bne.n	8002836 <__swsetup_r+0x46>
 8002832:	68ac      	ldr	r4, [r5, #8]
 8002834:	e7eb      	b.n	800280e <__swsetup_r+0x1e>
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <__swsetup_r+0xd8>)
 8002838:	429c      	cmp	r4, r3
 800283a:	bf08      	it	eq
 800283c:	68ec      	ldreq	r4, [r5, #12]
 800283e:	e7e6      	b.n	800280e <__swsetup_r+0x1e>
 8002840:	0758      	lsls	r0, r3, #29
 8002842:	d512      	bpl.n	800286a <__swsetup_r+0x7a>
 8002844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002846:	b141      	cbz	r1, 800285a <__swsetup_r+0x6a>
 8002848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800284c:	4299      	cmp	r1, r3
 800284e:	d002      	beq.n	8002856 <__swsetup_r+0x66>
 8002850:	4630      	mov	r0, r6
 8002852:	f000 fa5b 	bl	8002d0c <_free_r>
 8002856:	2300      	movs	r3, #0
 8002858:	6363      	str	r3, [r4, #52]	; 0x34
 800285a:	89a3      	ldrh	r3, [r4, #12]
 800285c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002860:	81a3      	strh	r3, [r4, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	6063      	str	r3, [r4, #4]
 8002866:	6923      	ldr	r3, [r4, #16]
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	81a3      	strh	r3, [r4, #12]
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	b94b      	cbnz	r3, 800288a <__swsetup_r+0x9a>
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800287c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002880:	d003      	beq.n	800288a <__swsetup_r+0x9a>
 8002882:	4621      	mov	r1, r4
 8002884:	4630      	mov	r0, r6
 8002886:	f000 fa01 	bl	8002c8c <__smakebuf_r>
 800288a:	89a0      	ldrh	r0, [r4, #12]
 800288c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002890:	f010 0301 	ands.w	r3, r0, #1
 8002894:	d00a      	beq.n	80028ac <__swsetup_r+0xbc>
 8002896:	2300      	movs	r3, #0
 8002898:	60a3      	str	r3, [r4, #8]
 800289a:	6963      	ldr	r3, [r4, #20]
 800289c:	425b      	negs	r3, r3
 800289e:	61a3      	str	r3, [r4, #24]
 80028a0:	6923      	ldr	r3, [r4, #16]
 80028a2:	b943      	cbnz	r3, 80028b6 <__swsetup_r+0xc6>
 80028a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028a8:	d1ba      	bne.n	8002820 <__swsetup_r+0x30>
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	0781      	lsls	r1, r0, #30
 80028ae:	bf58      	it	pl
 80028b0:	6963      	ldrpl	r3, [r4, #20]
 80028b2:	60a3      	str	r3, [r4, #8]
 80028b4:	e7f4      	b.n	80028a0 <__swsetup_r+0xb0>
 80028b6:	2000      	movs	r0, #0
 80028b8:	e7f7      	b.n	80028aa <__swsetup_r+0xba>
 80028ba:	bf00      	nop
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	080036c4 	.word	0x080036c4
 80028c4:	080036e4 	.word	0x080036e4
 80028c8:	080036a4 	.word	0x080036a4

080028cc <__sflush_r>:
 80028cc:	898a      	ldrh	r2, [r1, #12]
 80028ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d2:	4605      	mov	r5, r0
 80028d4:	0710      	lsls	r0, r2, #28
 80028d6:	460c      	mov	r4, r1
 80028d8:	d458      	bmi.n	800298c <__sflush_r+0xc0>
 80028da:	684b      	ldr	r3, [r1, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	dc05      	bgt.n	80028ec <__sflush_r+0x20>
 80028e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	dc02      	bgt.n	80028ec <__sflush_r+0x20>
 80028e6:	2000      	movs	r0, #0
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ee:	2e00      	cmp	r6, #0
 80028f0:	d0f9      	beq.n	80028e6 <__sflush_r+0x1a>
 80028f2:	2300      	movs	r3, #0
 80028f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028f8:	682f      	ldr	r7, [r5, #0]
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	d032      	beq.n	8002964 <__sflush_r+0x98>
 80028fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	075a      	lsls	r2, r3, #29
 8002904:	d505      	bpl.n	8002912 <__sflush_r+0x46>
 8002906:	6863      	ldr	r3, [r4, #4]
 8002908:	1ac0      	subs	r0, r0, r3
 800290a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800290c:	b10b      	cbz	r3, 8002912 <__sflush_r+0x46>
 800290e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002910:	1ac0      	subs	r0, r0, r3
 8002912:	2300      	movs	r3, #0
 8002914:	4602      	mov	r2, r0
 8002916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002918:	6a21      	ldr	r1, [r4, #32]
 800291a:	4628      	mov	r0, r5
 800291c:	47b0      	blx	r6
 800291e:	1c43      	adds	r3, r0, #1
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	d106      	bne.n	8002932 <__sflush_r+0x66>
 8002924:	6829      	ldr	r1, [r5, #0]
 8002926:	291d      	cmp	r1, #29
 8002928:	d82c      	bhi.n	8002984 <__sflush_r+0xb8>
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <__sflush_r+0x108>)
 800292c:	40ca      	lsrs	r2, r1
 800292e:	07d6      	lsls	r6, r2, #31
 8002930:	d528      	bpl.n	8002984 <__sflush_r+0xb8>
 8002932:	2200      	movs	r2, #0
 8002934:	6062      	str	r2, [r4, #4]
 8002936:	04d9      	lsls	r1, r3, #19
 8002938:	6922      	ldr	r2, [r4, #16]
 800293a:	6022      	str	r2, [r4, #0]
 800293c:	d504      	bpl.n	8002948 <__sflush_r+0x7c>
 800293e:	1c42      	adds	r2, r0, #1
 8002940:	d101      	bne.n	8002946 <__sflush_r+0x7a>
 8002942:	682b      	ldr	r3, [r5, #0]
 8002944:	b903      	cbnz	r3, 8002948 <__sflush_r+0x7c>
 8002946:	6560      	str	r0, [r4, #84]	; 0x54
 8002948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800294a:	602f      	str	r7, [r5, #0]
 800294c:	2900      	cmp	r1, #0
 800294e:	d0ca      	beq.n	80028e6 <__sflush_r+0x1a>
 8002950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002954:	4299      	cmp	r1, r3
 8002956:	d002      	beq.n	800295e <__sflush_r+0x92>
 8002958:	4628      	mov	r0, r5
 800295a:	f000 f9d7 	bl	8002d0c <_free_r>
 800295e:	2000      	movs	r0, #0
 8002960:	6360      	str	r0, [r4, #52]	; 0x34
 8002962:	e7c1      	b.n	80028e8 <__sflush_r+0x1c>
 8002964:	6a21      	ldr	r1, [r4, #32]
 8002966:	2301      	movs	r3, #1
 8002968:	4628      	mov	r0, r5
 800296a:	47b0      	blx	r6
 800296c:	1c41      	adds	r1, r0, #1
 800296e:	d1c7      	bne.n	8002900 <__sflush_r+0x34>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0c4      	beq.n	8002900 <__sflush_r+0x34>
 8002976:	2b1d      	cmp	r3, #29
 8002978:	d001      	beq.n	800297e <__sflush_r+0xb2>
 800297a:	2b16      	cmp	r3, #22
 800297c:	d101      	bne.n	8002982 <__sflush_r+0xb6>
 800297e:	602f      	str	r7, [r5, #0]
 8002980:	e7b1      	b.n	80028e6 <__sflush_r+0x1a>
 8002982:	89a3      	ldrh	r3, [r4, #12]
 8002984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002988:	81a3      	strh	r3, [r4, #12]
 800298a:	e7ad      	b.n	80028e8 <__sflush_r+0x1c>
 800298c:	690f      	ldr	r7, [r1, #16]
 800298e:	2f00      	cmp	r7, #0
 8002990:	d0a9      	beq.n	80028e6 <__sflush_r+0x1a>
 8002992:	0793      	lsls	r3, r2, #30
 8002994:	680e      	ldr	r6, [r1, #0]
 8002996:	bf08      	it	eq
 8002998:	694b      	ldreq	r3, [r1, #20]
 800299a:	600f      	str	r7, [r1, #0]
 800299c:	bf18      	it	ne
 800299e:	2300      	movne	r3, #0
 80029a0:	eba6 0807 	sub.w	r8, r6, r7
 80029a4:	608b      	str	r3, [r1, #8]
 80029a6:	f1b8 0f00 	cmp.w	r8, #0
 80029aa:	dd9c      	ble.n	80028e6 <__sflush_r+0x1a>
 80029ac:	6a21      	ldr	r1, [r4, #32]
 80029ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029b0:	4643      	mov	r3, r8
 80029b2:	463a      	mov	r2, r7
 80029b4:	4628      	mov	r0, r5
 80029b6:	47b0      	blx	r6
 80029b8:	2800      	cmp	r0, #0
 80029ba:	dc06      	bgt.n	80029ca <__sflush_r+0xfe>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c2:	81a3      	strh	r3, [r4, #12]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	e78e      	b.n	80028e8 <__sflush_r+0x1c>
 80029ca:	4407      	add	r7, r0
 80029cc:	eba8 0800 	sub.w	r8, r8, r0
 80029d0:	e7e9      	b.n	80029a6 <__sflush_r+0xda>
 80029d2:	bf00      	nop
 80029d4:	20400001 	.word	0x20400001

080029d8 <_fflush_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	690b      	ldr	r3, [r1, #16]
 80029dc:	4605      	mov	r5, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	b913      	cbnz	r3, 80029e8 <_fflush_r+0x10>
 80029e2:	2500      	movs	r5, #0
 80029e4:	4628      	mov	r0, r5
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
 80029e8:	b118      	cbz	r0, 80029f2 <_fflush_r+0x1a>
 80029ea:	6983      	ldr	r3, [r0, #24]
 80029ec:	b90b      	cbnz	r3, 80029f2 <_fflush_r+0x1a>
 80029ee:	f000 f887 	bl	8002b00 <__sinit>
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <_fflush_r+0x6c>)
 80029f4:	429c      	cmp	r4, r3
 80029f6:	d11b      	bne.n	8002a30 <_fflush_r+0x58>
 80029f8:	686c      	ldr	r4, [r5, #4]
 80029fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ef      	beq.n	80029e2 <_fflush_r+0xa>
 8002a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a04:	07d0      	lsls	r0, r2, #31
 8002a06:	d404      	bmi.n	8002a12 <_fflush_r+0x3a>
 8002a08:	0599      	lsls	r1, r3, #22
 8002a0a:	d402      	bmi.n	8002a12 <_fflush_r+0x3a>
 8002a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a0e:	f000 f915 	bl	8002c3c <__retarget_lock_acquire_recursive>
 8002a12:	4628      	mov	r0, r5
 8002a14:	4621      	mov	r1, r4
 8002a16:	f7ff ff59 	bl	80028cc <__sflush_r>
 8002a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a1c:	07da      	lsls	r2, r3, #31
 8002a1e:	4605      	mov	r5, r0
 8002a20:	d4e0      	bmi.n	80029e4 <_fflush_r+0xc>
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	059b      	lsls	r3, r3, #22
 8002a26:	d4dd      	bmi.n	80029e4 <_fflush_r+0xc>
 8002a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a2a:	f000 f908 	bl	8002c3e <__retarget_lock_release_recursive>
 8002a2e:	e7d9      	b.n	80029e4 <_fflush_r+0xc>
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <_fflush_r+0x70>)
 8002a32:	429c      	cmp	r4, r3
 8002a34:	d101      	bne.n	8002a3a <_fflush_r+0x62>
 8002a36:	68ac      	ldr	r4, [r5, #8]
 8002a38:	e7df      	b.n	80029fa <_fflush_r+0x22>
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <_fflush_r+0x74>)
 8002a3c:	429c      	cmp	r4, r3
 8002a3e:	bf08      	it	eq
 8002a40:	68ec      	ldreq	r4, [r5, #12]
 8002a42:	e7da      	b.n	80029fa <_fflush_r+0x22>
 8002a44:	080036c4 	.word	0x080036c4
 8002a48:	080036e4 	.word	0x080036e4
 8002a4c:	080036a4 	.word	0x080036a4

08002a50 <std>:
 8002a50:	2300      	movs	r3, #0
 8002a52:	b510      	push	{r4, lr}
 8002a54:	4604      	mov	r4, r0
 8002a56:	e9c0 3300 	strd	r3, r3, [r0]
 8002a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a5e:	6083      	str	r3, [r0, #8]
 8002a60:	8181      	strh	r1, [r0, #12]
 8002a62:	6643      	str	r3, [r0, #100]	; 0x64
 8002a64:	81c2      	strh	r2, [r0, #14]
 8002a66:	6183      	str	r3, [r0, #24]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	305c      	adds	r0, #92	; 0x5c
 8002a6e:	f7ff fdd7 	bl	8002620 <memset>
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <std+0x38>)
 8002a74:	6263      	str	r3, [r4, #36]	; 0x24
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <std+0x3c>)
 8002a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <std+0x40>)
 8002a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <std+0x44>)
 8002a80:	6224      	str	r4, [r4, #32]
 8002a82:	6323      	str	r3, [r4, #48]	; 0x30
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	bf00      	nop
 8002a88:	080034c9 	.word	0x080034c9
 8002a8c:	080034eb 	.word	0x080034eb
 8002a90:	08003523 	.word	0x08003523
 8002a94:	08003547 	.word	0x08003547

08002a98 <_cleanup_r>:
 8002a98:	4901      	ldr	r1, [pc, #4]	; (8002aa0 <_cleanup_r+0x8>)
 8002a9a:	f000 b8af 	b.w	8002bfc <_fwalk_reent>
 8002a9e:	bf00      	nop
 8002aa0:	080029d9 	.word	0x080029d9

08002aa4 <__sfmoreglue>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2268      	movs	r2, #104	; 0x68
 8002aa8:	1e4d      	subs	r5, r1, #1
 8002aaa:	4355      	muls	r5, r2
 8002aac:	460e      	mov	r6, r1
 8002aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ab2:	f000 f997 	bl	8002de4 <_malloc_r>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	b140      	cbz	r0, 8002acc <__sfmoreglue+0x28>
 8002aba:	2100      	movs	r1, #0
 8002abc:	e9c0 1600 	strd	r1, r6, [r0]
 8002ac0:	300c      	adds	r0, #12
 8002ac2:	60a0      	str	r0, [r4, #8]
 8002ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ac8:	f7ff fdaa 	bl	8002620 <memset>
 8002acc:	4620      	mov	r0, r4
 8002ace:	bd70      	pop	{r4, r5, r6, pc}

08002ad0 <__sfp_lock_acquire>:
 8002ad0:	4801      	ldr	r0, [pc, #4]	; (8002ad8 <__sfp_lock_acquire+0x8>)
 8002ad2:	f000 b8b3 	b.w	8002c3c <__retarget_lock_acquire_recursive>
 8002ad6:	bf00      	nop
 8002ad8:	200001e9 	.word	0x200001e9

08002adc <__sfp_lock_release>:
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <__sfp_lock_release+0x8>)
 8002ade:	f000 b8ae 	b.w	8002c3e <__retarget_lock_release_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	200001e9 	.word	0x200001e9

08002ae8 <__sinit_lock_acquire>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__sinit_lock_acquire+0x8>)
 8002aea:	f000 b8a7 	b.w	8002c3c <__retarget_lock_acquire_recursive>
 8002aee:	bf00      	nop
 8002af0:	200001ea 	.word	0x200001ea

08002af4 <__sinit_lock_release>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__sinit_lock_release+0x8>)
 8002af6:	f000 b8a2 	b.w	8002c3e <__retarget_lock_release_recursive>
 8002afa:	bf00      	nop
 8002afc:	200001ea 	.word	0x200001ea

08002b00 <__sinit>:
 8002b00:	b510      	push	{r4, lr}
 8002b02:	4604      	mov	r4, r0
 8002b04:	f7ff fff0 	bl	8002ae8 <__sinit_lock_acquire>
 8002b08:	69a3      	ldr	r3, [r4, #24]
 8002b0a:	b11b      	cbz	r3, 8002b14 <__sinit+0x14>
 8002b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b10:	f7ff bff0 	b.w	8002af4 <__sinit_lock_release>
 8002b14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b18:	6523      	str	r3, [r4, #80]	; 0x50
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <__sinit+0x68>)
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <__sinit+0x6c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b22:	42a3      	cmp	r3, r4
 8002b24:	bf04      	itt	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	61a3      	streq	r3, [r4, #24]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f000 f820 	bl	8002b70 <__sfp>
 8002b30:	6060      	str	r0, [r4, #4]
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 f81c 	bl	8002b70 <__sfp>
 8002b38:	60a0      	str	r0, [r4, #8]
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 f818 	bl	8002b70 <__sfp>
 8002b40:	2200      	movs	r2, #0
 8002b42:	60e0      	str	r0, [r4, #12]
 8002b44:	2104      	movs	r1, #4
 8002b46:	6860      	ldr	r0, [r4, #4]
 8002b48:	f7ff ff82 	bl	8002a50 <std>
 8002b4c:	68a0      	ldr	r0, [r4, #8]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2109      	movs	r1, #9
 8002b52:	f7ff ff7d 	bl	8002a50 <std>
 8002b56:	68e0      	ldr	r0, [r4, #12]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	2112      	movs	r1, #18
 8002b5c:	f7ff ff78 	bl	8002a50 <std>
 8002b60:	2301      	movs	r3, #1
 8002b62:	61a3      	str	r3, [r4, #24]
 8002b64:	e7d2      	b.n	8002b0c <__sinit+0xc>
 8002b66:	bf00      	nop
 8002b68:	080036a0 	.word	0x080036a0
 8002b6c:	08002a99 	.word	0x08002a99

08002b70 <__sfp>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	4607      	mov	r7, r0
 8002b74:	f7ff ffac 	bl	8002ad0 <__sfp_lock_acquire>
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <__sfp+0x84>)
 8002b7a:	681e      	ldr	r6, [r3, #0]
 8002b7c:	69b3      	ldr	r3, [r6, #24]
 8002b7e:	b913      	cbnz	r3, 8002b86 <__sfp+0x16>
 8002b80:	4630      	mov	r0, r6
 8002b82:	f7ff ffbd 	bl	8002b00 <__sinit>
 8002b86:	3648      	adds	r6, #72	; 0x48
 8002b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	d503      	bpl.n	8002b98 <__sfp+0x28>
 8002b90:	6833      	ldr	r3, [r6, #0]
 8002b92:	b30b      	cbz	r3, 8002bd8 <__sfp+0x68>
 8002b94:	6836      	ldr	r6, [r6, #0]
 8002b96:	e7f7      	b.n	8002b88 <__sfp+0x18>
 8002b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b9c:	b9d5      	cbnz	r5, 8002bd4 <__sfp+0x64>
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <__sfp+0x88>)
 8002ba0:	60e3      	str	r3, [r4, #12]
 8002ba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ba6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ba8:	f000 f847 	bl	8002c3a <__retarget_lock_init_recursive>
 8002bac:	f7ff ff96 	bl	8002adc <__sfp_lock_release>
 8002bb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bb8:	6025      	str	r5, [r4, #0]
 8002bba:	61a5      	str	r5, [r4, #24]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bc4:	f7ff fd2c 	bl	8002620 <memset>
 8002bc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd4:	3468      	adds	r4, #104	; 0x68
 8002bd6:	e7d9      	b.n	8002b8c <__sfp+0x1c>
 8002bd8:	2104      	movs	r1, #4
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f7ff ff62 	bl	8002aa4 <__sfmoreglue>
 8002be0:	4604      	mov	r4, r0
 8002be2:	6030      	str	r0, [r6, #0]
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d1d5      	bne.n	8002b94 <__sfp+0x24>
 8002be8:	f7ff ff78 	bl	8002adc <__sfp_lock_release>
 8002bec:	230c      	movs	r3, #12
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	e7ee      	b.n	8002bd0 <__sfp+0x60>
 8002bf2:	bf00      	nop
 8002bf4:	080036a0 	.word	0x080036a0
 8002bf8:	ffff0001 	.word	0xffff0001

08002bfc <_fwalk_reent>:
 8002bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c00:	4606      	mov	r6, r0
 8002c02:	4688      	mov	r8, r1
 8002c04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c08:	2700      	movs	r7, #0
 8002c0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002c12:	d505      	bpl.n	8002c20 <_fwalk_reent+0x24>
 8002c14:	6824      	ldr	r4, [r4, #0]
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d1f7      	bne.n	8002c0a <_fwalk_reent+0xe>
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c20:	89ab      	ldrh	r3, [r5, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d907      	bls.n	8002c36 <_fwalk_reent+0x3a>
 8002c26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	d003      	beq.n	8002c36 <_fwalk_reent+0x3a>
 8002c2e:	4629      	mov	r1, r5
 8002c30:	4630      	mov	r0, r6
 8002c32:	47c0      	blx	r8
 8002c34:	4307      	orrs	r7, r0
 8002c36:	3568      	adds	r5, #104	; 0x68
 8002c38:	e7e9      	b.n	8002c0e <_fwalk_reent+0x12>

08002c3a <__retarget_lock_init_recursive>:
 8002c3a:	4770      	bx	lr

08002c3c <__retarget_lock_acquire_recursive>:
 8002c3c:	4770      	bx	lr

08002c3e <__retarget_lock_release_recursive>:
 8002c3e:	4770      	bx	lr

08002c40 <__swhatbuf_r>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	460e      	mov	r6, r1
 8002c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	b096      	sub	sp, #88	; 0x58
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	da08      	bge.n	8002c64 <__swhatbuf_r+0x24>
 8002c52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	602a      	str	r2, [r5, #0]
 8002c5a:	061a      	lsls	r2, r3, #24
 8002c5c:	d410      	bmi.n	8002c80 <__swhatbuf_r+0x40>
 8002c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c62:	e00e      	b.n	8002c82 <__swhatbuf_r+0x42>
 8002c64:	466a      	mov	r2, sp
 8002c66:	f000 fc95 	bl	8003594 <_fstat_r>
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	dbf1      	blt.n	8002c52 <__swhatbuf_r+0x12>
 8002c6e:	9a01      	ldr	r2, [sp, #4]
 8002c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c78:	425a      	negs	r2, r3
 8002c7a:	415a      	adcs	r2, r3
 8002c7c:	602a      	str	r2, [r5, #0]
 8002c7e:	e7ee      	b.n	8002c5e <__swhatbuf_r+0x1e>
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	2000      	movs	r0, #0
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	b016      	add	sp, #88	; 0x58
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c8c <__smakebuf_r>:
 8002c8c:	898b      	ldrh	r3, [r1, #12]
 8002c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c90:	079d      	lsls	r5, r3, #30
 8002c92:	4606      	mov	r6, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	d507      	bpl.n	8002ca8 <__smakebuf_r+0x1c>
 8002c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	6163      	str	r3, [r4, #20]
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	ab01      	add	r3, sp, #4
 8002caa:	466a      	mov	r2, sp
 8002cac:	f7ff ffc8 	bl	8002c40 <__swhatbuf_r>
 8002cb0:	9900      	ldr	r1, [sp, #0]
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f000 f895 	bl	8002de4 <_malloc_r>
 8002cba:	b948      	cbnz	r0, 8002cd0 <__smakebuf_r+0x44>
 8002cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc0:	059a      	lsls	r2, r3, #22
 8002cc2:	d4ef      	bmi.n	8002ca4 <__smakebuf_r+0x18>
 8002cc4:	f023 0303 	bic.w	r3, r3, #3
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	81a3      	strh	r3, [r4, #12]
 8002cce:	e7e3      	b.n	8002c98 <__smakebuf_r+0xc>
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <__smakebuf_r+0x7c>)
 8002cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	6020      	str	r0, [r4, #0]
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cdc:	81a3      	strh	r3, [r4, #12]
 8002cde:	9b00      	ldr	r3, [sp, #0]
 8002ce0:	6163      	str	r3, [r4, #20]
 8002ce2:	9b01      	ldr	r3, [sp, #4]
 8002ce4:	6120      	str	r0, [r4, #16]
 8002ce6:	b15b      	cbz	r3, 8002d00 <__smakebuf_r+0x74>
 8002ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cec:	4630      	mov	r0, r6
 8002cee:	f000 fc63 	bl	80035b8 <_isatty_r>
 8002cf2:	b128      	cbz	r0, 8002d00 <__smakebuf_r+0x74>
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	89a0      	ldrh	r0, [r4, #12]
 8002d02:	4305      	orrs	r5, r0
 8002d04:	81a5      	strh	r5, [r4, #12]
 8002d06:	e7cd      	b.n	8002ca4 <__smakebuf_r+0x18>
 8002d08:	08002a99 	.word	0x08002a99

08002d0c <_free_r>:
 8002d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d044      	beq.n	8002d9c <_free_r+0x90>
 8002d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d16:	9001      	str	r0, [sp, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8002d1e:	bfb8      	it	lt
 8002d20:	18e4      	addlt	r4, r4, r3
 8002d22:	f000 fc6b 	bl	80035fc <__malloc_lock>
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <_free_r+0x94>)
 8002d28:	9801      	ldr	r0, [sp, #4]
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	b933      	cbnz	r3, 8002d3c <_free_r+0x30>
 8002d2e:	6063      	str	r3, [r4, #4]
 8002d30:	6014      	str	r4, [r2, #0]
 8002d32:	b003      	add	sp, #12
 8002d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d38:	f000 bc66 	b.w	8003608 <__malloc_unlock>
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d908      	bls.n	8002d52 <_free_r+0x46>
 8002d40:	6825      	ldr	r5, [r4, #0]
 8002d42:	1961      	adds	r1, r4, r5
 8002d44:	428b      	cmp	r3, r1
 8002d46:	bf01      	itttt	eq
 8002d48:	6819      	ldreq	r1, [r3, #0]
 8002d4a:	685b      	ldreq	r3, [r3, #4]
 8002d4c:	1949      	addeq	r1, r1, r5
 8002d4e:	6021      	streq	r1, [r4, #0]
 8002d50:	e7ed      	b.n	8002d2e <_free_r+0x22>
 8002d52:	461a      	mov	r2, r3
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b10b      	cbz	r3, 8002d5c <_free_r+0x50>
 8002d58:	42a3      	cmp	r3, r4
 8002d5a:	d9fa      	bls.n	8002d52 <_free_r+0x46>
 8002d5c:	6811      	ldr	r1, [r2, #0]
 8002d5e:	1855      	adds	r5, r2, r1
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d10b      	bne.n	8002d7c <_free_r+0x70>
 8002d64:	6824      	ldr	r4, [r4, #0]
 8002d66:	4421      	add	r1, r4
 8002d68:	1854      	adds	r4, r2, r1
 8002d6a:	42a3      	cmp	r3, r4
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	d1e0      	bne.n	8002d32 <_free_r+0x26>
 8002d70:	681c      	ldr	r4, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6053      	str	r3, [r2, #4]
 8002d76:	4421      	add	r1, r4
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	e7da      	b.n	8002d32 <_free_r+0x26>
 8002d7c:	d902      	bls.n	8002d84 <_free_r+0x78>
 8002d7e:	230c      	movs	r3, #12
 8002d80:	6003      	str	r3, [r0, #0]
 8002d82:	e7d6      	b.n	8002d32 <_free_r+0x26>
 8002d84:	6825      	ldr	r5, [r4, #0]
 8002d86:	1961      	adds	r1, r4, r5
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	bf04      	itt	eq
 8002d8c:	6819      	ldreq	r1, [r3, #0]
 8002d8e:	685b      	ldreq	r3, [r3, #4]
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	bf04      	itt	eq
 8002d94:	1949      	addeq	r1, r1, r5
 8002d96:	6021      	streq	r1, [r4, #0]
 8002d98:	6054      	str	r4, [r2, #4]
 8002d9a:	e7ca      	b.n	8002d32 <_free_r+0x26>
 8002d9c:	b003      	add	sp, #12
 8002d9e:	bd30      	pop	{r4, r5, pc}
 8002da0:	200001ec 	.word	0x200001ec

08002da4 <sbrk_aligned>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4e0e      	ldr	r6, [pc, #56]	; (8002de0 <sbrk_aligned+0x3c>)
 8002da8:	460c      	mov	r4, r1
 8002daa:	6831      	ldr	r1, [r6, #0]
 8002dac:	4605      	mov	r5, r0
 8002dae:	b911      	cbnz	r1, 8002db6 <sbrk_aligned+0x12>
 8002db0:	f000 fb7a 	bl	80034a8 <_sbrk_r>
 8002db4:	6030      	str	r0, [r6, #0]
 8002db6:	4621      	mov	r1, r4
 8002db8:	4628      	mov	r0, r5
 8002dba:	f000 fb75 	bl	80034a8 <_sbrk_r>
 8002dbe:	1c43      	adds	r3, r0, #1
 8002dc0:	d00a      	beq.n	8002dd8 <sbrk_aligned+0x34>
 8002dc2:	1cc4      	adds	r4, r0, #3
 8002dc4:	f024 0403 	bic.w	r4, r4, #3
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d007      	beq.n	8002ddc <sbrk_aligned+0x38>
 8002dcc:	1a21      	subs	r1, r4, r0
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fb6a 	bl	80034a8 <_sbrk_r>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d101      	bne.n	8002ddc <sbrk_aligned+0x38>
 8002dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
 8002de0:	200001f0 	.word	0x200001f0

08002de4 <_malloc_r>:
 8002de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de8:	1ccd      	adds	r5, r1, #3
 8002dea:	f025 0503 	bic.w	r5, r5, #3
 8002dee:	3508      	adds	r5, #8
 8002df0:	2d0c      	cmp	r5, #12
 8002df2:	bf38      	it	cc
 8002df4:	250c      	movcc	r5, #12
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	4607      	mov	r7, r0
 8002dfa:	db01      	blt.n	8002e00 <_malloc_r+0x1c>
 8002dfc:	42a9      	cmp	r1, r5
 8002dfe:	d905      	bls.n	8002e0c <_malloc_r+0x28>
 8002e00:	230c      	movs	r3, #12
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	2600      	movs	r6, #0
 8002e06:	4630      	mov	r0, r6
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e0c:	4e2e      	ldr	r6, [pc, #184]	; (8002ec8 <_malloc_r+0xe4>)
 8002e0e:	f000 fbf5 	bl	80035fc <__malloc_lock>
 8002e12:	6833      	ldr	r3, [r6, #0]
 8002e14:	461c      	mov	r4, r3
 8002e16:	bb34      	cbnz	r4, 8002e66 <_malloc_r+0x82>
 8002e18:	4629      	mov	r1, r5
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	f7ff ffc2 	bl	8002da4 <sbrk_aligned>
 8002e20:	1c43      	adds	r3, r0, #1
 8002e22:	4604      	mov	r4, r0
 8002e24:	d14d      	bne.n	8002ec2 <_malloc_r+0xde>
 8002e26:	6834      	ldr	r4, [r6, #0]
 8002e28:	4626      	mov	r6, r4
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	d140      	bne.n	8002eb0 <_malloc_r+0xcc>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	4631      	mov	r1, r6
 8002e32:	4638      	mov	r0, r7
 8002e34:	eb04 0803 	add.w	r8, r4, r3
 8002e38:	f000 fb36 	bl	80034a8 <_sbrk_r>
 8002e3c:	4580      	cmp	r8, r0
 8002e3e:	d13a      	bne.n	8002eb6 <_malloc_r+0xd2>
 8002e40:	6821      	ldr	r1, [r4, #0]
 8002e42:	3503      	adds	r5, #3
 8002e44:	1a6d      	subs	r5, r5, r1
 8002e46:	f025 0503 	bic.w	r5, r5, #3
 8002e4a:	3508      	adds	r5, #8
 8002e4c:	2d0c      	cmp	r5, #12
 8002e4e:	bf38      	it	cc
 8002e50:	250c      	movcc	r5, #12
 8002e52:	4629      	mov	r1, r5
 8002e54:	4638      	mov	r0, r7
 8002e56:	f7ff ffa5 	bl	8002da4 <sbrk_aligned>
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d02b      	beq.n	8002eb6 <_malloc_r+0xd2>
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	442b      	add	r3, r5
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	e00e      	b.n	8002e84 <_malloc_r+0xa0>
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	1b52      	subs	r2, r2, r5
 8002e6a:	d41e      	bmi.n	8002eaa <_malloc_r+0xc6>
 8002e6c:	2a0b      	cmp	r2, #11
 8002e6e:	d916      	bls.n	8002e9e <_malloc_r+0xba>
 8002e70:	1961      	adds	r1, r4, r5
 8002e72:	42a3      	cmp	r3, r4
 8002e74:	6025      	str	r5, [r4, #0]
 8002e76:	bf18      	it	ne
 8002e78:	6059      	strne	r1, [r3, #4]
 8002e7a:	6863      	ldr	r3, [r4, #4]
 8002e7c:	bf08      	it	eq
 8002e7e:	6031      	streq	r1, [r6, #0]
 8002e80:	5162      	str	r2, [r4, r5]
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	4638      	mov	r0, r7
 8002e86:	f104 060b 	add.w	r6, r4, #11
 8002e8a:	f000 fbbd 	bl	8003608 <__malloc_unlock>
 8002e8e:	f026 0607 	bic.w	r6, r6, #7
 8002e92:	1d23      	adds	r3, r4, #4
 8002e94:	1af2      	subs	r2, r6, r3
 8002e96:	d0b6      	beq.n	8002e06 <_malloc_r+0x22>
 8002e98:	1b9b      	subs	r3, r3, r6
 8002e9a:	50a3      	str	r3, [r4, r2]
 8002e9c:	e7b3      	b.n	8002e06 <_malloc_r+0x22>
 8002e9e:	6862      	ldr	r2, [r4, #4]
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	bf0c      	ite	eq
 8002ea4:	6032      	streq	r2, [r6, #0]
 8002ea6:	605a      	strne	r2, [r3, #4]
 8002ea8:	e7ec      	b.n	8002e84 <_malloc_r+0xa0>
 8002eaa:	4623      	mov	r3, r4
 8002eac:	6864      	ldr	r4, [r4, #4]
 8002eae:	e7b2      	b.n	8002e16 <_malloc_r+0x32>
 8002eb0:	4634      	mov	r4, r6
 8002eb2:	6876      	ldr	r6, [r6, #4]
 8002eb4:	e7b9      	b.n	8002e2a <_malloc_r+0x46>
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4638      	mov	r0, r7
 8002ebc:	f000 fba4 	bl	8003608 <__malloc_unlock>
 8002ec0:	e7a1      	b.n	8002e06 <_malloc_r+0x22>
 8002ec2:	6025      	str	r5, [r4, #0]
 8002ec4:	e7de      	b.n	8002e84 <_malloc_r+0xa0>
 8002ec6:	bf00      	nop
 8002ec8:	200001ec 	.word	0x200001ec

08002ecc <__sfputc_r>:
 8002ecc:	6893      	ldr	r3, [r2, #8]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	b410      	push	{r4}
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	da08      	bge.n	8002eea <__sfputc_r+0x1e>
 8002ed8:	6994      	ldr	r4, [r2, #24]
 8002eda:	42a3      	cmp	r3, r4
 8002edc:	db01      	blt.n	8002ee2 <__sfputc_r+0x16>
 8002ede:	290a      	cmp	r1, #10
 8002ee0:	d103      	bne.n	8002eea <__sfputc_r+0x1e>
 8002ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee6:	f7ff bc31 	b.w	800274c <__swbuf_r>
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	1c58      	adds	r0, r3, #1
 8002eee:	6010      	str	r0, [r2, #0]
 8002ef0:	7019      	strb	r1, [r3, #0]
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <__sfputs_r>:
 8002efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efc:	4606      	mov	r6, r0
 8002efe:	460f      	mov	r7, r1
 8002f00:	4614      	mov	r4, r2
 8002f02:	18d5      	adds	r5, r2, r3
 8002f04:	42ac      	cmp	r4, r5
 8002f06:	d101      	bne.n	8002f0c <__sfputs_r+0x12>
 8002f08:	2000      	movs	r0, #0
 8002f0a:	e007      	b.n	8002f1c <__sfputs_r+0x22>
 8002f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f10:	463a      	mov	r2, r7
 8002f12:	4630      	mov	r0, r6
 8002f14:	f7ff ffda 	bl	8002ecc <__sfputc_r>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d1f3      	bne.n	8002f04 <__sfputs_r+0xa>
 8002f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f20 <_vfiprintf_r>:
 8002f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f24:	460d      	mov	r5, r1
 8002f26:	b09d      	sub	sp, #116	; 0x74
 8002f28:	4614      	mov	r4, r2
 8002f2a:	4698      	mov	r8, r3
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	b118      	cbz	r0, 8002f38 <_vfiprintf_r+0x18>
 8002f30:	6983      	ldr	r3, [r0, #24]
 8002f32:	b90b      	cbnz	r3, 8002f38 <_vfiprintf_r+0x18>
 8002f34:	f7ff fde4 	bl	8002b00 <__sinit>
 8002f38:	4b89      	ldr	r3, [pc, #548]	; (8003160 <_vfiprintf_r+0x240>)
 8002f3a:	429d      	cmp	r5, r3
 8002f3c:	d11b      	bne.n	8002f76 <_vfiprintf_r+0x56>
 8002f3e:	6875      	ldr	r5, [r6, #4]
 8002f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f42:	07d9      	lsls	r1, r3, #31
 8002f44:	d405      	bmi.n	8002f52 <_vfiprintf_r+0x32>
 8002f46:	89ab      	ldrh	r3, [r5, #12]
 8002f48:	059a      	lsls	r2, r3, #22
 8002f4a:	d402      	bmi.n	8002f52 <_vfiprintf_r+0x32>
 8002f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f4e:	f7ff fe75 	bl	8002c3c <__retarget_lock_acquire_recursive>
 8002f52:	89ab      	ldrh	r3, [r5, #12]
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	d501      	bpl.n	8002f5c <_vfiprintf_r+0x3c>
 8002f58:	692b      	ldr	r3, [r5, #16]
 8002f5a:	b9eb      	cbnz	r3, 8002f98 <_vfiprintf_r+0x78>
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	4630      	mov	r0, r6
 8002f60:	f7ff fc46 	bl	80027f0 <__swsetup_r>
 8002f64:	b1c0      	cbz	r0, 8002f98 <_vfiprintf_r+0x78>
 8002f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f68:	07dc      	lsls	r4, r3, #31
 8002f6a:	d50e      	bpl.n	8002f8a <_vfiprintf_r+0x6a>
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	b01d      	add	sp, #116	; 0x74
 8002f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f76:	4b7b      	ldr	r3, [pc, #492]	; (8003164 <_vfiprintf_r+0x244>)
 8002f78:	429d      	cmp	r5, r3
 8002f7a:	d101      	bne.n	8002f80 <_vfiprintf_r+0x60>
 8002f7c:	68b5      	ldr	r5, [r6, #8]
 8002f7e:	e7df      	b.n	8002f40 <_vfiprintf_r+0x20>
 8002f80:	4b79      	ldr	r3, [pc, #484]	; (8003168 <_vfiprintf_r+0x248>)
 8002f82:	429d      	cmp	r5, r3
 8002f84:	bf08      	it	eq
 8002f86:	68f5      	ldreq	r5, [r6, #12]
 8002f88:	e7da      	b.n	8002f40 <_vfiprintf_r+0x20>
 8002f8a:	89ab      	ldrh	r3, [r5, #12]
 8002f8c:	0598      	lsls	r0, r3, #22
 8002f8e:	d4ed      	bmi.n	8002f6c <_vfiprintf_r+0x4c>
 8002f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f92:	f7ff fe54 	bl	8002c3e <__retarget_lock_release_recursive>
 8002f96:	e7e9      	b.n	8002f6c <_vfiprintf_r+0x4c>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fa6:	2330      	movs	r3, #48	; 0x30
 8002fa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800316c <_vfiprintf_r+0x24c>
 8002fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fb0:	f04f 0901 	mov.w	r9, #1
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	469a      	mov	sl, r3
 8002fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fbc:	b10a      	cbz	r2, 8002fc2 <_vfiprintf_r+0xa2>
 8002fbe:	2a25      	cmp	r2, #37	; 0x25
 8002fc0:	d1f9      	bne.n	8002fb6 <_vfiprintf_r+0x96>
 8002fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8002fc6:	d00b      	beq.n	8002fe0 <_vfiprintf_r+0xc0>
 8002fc8:	465b      	mov	r3, fp
 8002fca:	4622      	mov	r2, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f7ff ff93 	bl	8002efa <__sfputs_r>
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	f000 80aa 	beq.w	800312e <_vfiprintf_r+0x20e>
 8002fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fdc:	445a      	add	r2, fp
 8002fde:	9209      	str	r2, [sp, #36]	; 0x24
 8002fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a2 	beq.w	800312e <_vfiprintf_r+0x20e>
 8002fea:	2300      	movs	r3, #0
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff4:	f10a 0a01 	add.w	sl, sl, #1
 8002ff8:	9304      	str	r3, [sp, #16]
 8002ffa:	9307      	str	r3, [sp, #28]
 8002ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003000:	931a      	str	r3, [sp, #104]	; 0x68
 8003002:	4654      	mov	r4, sl
 8003004:	2205      	movs	r2, #5
 8003006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800300a:	4858      	ldr	r0, [pc, #352]	; (800316c <_vfiprintf_r+0x24c>)
 800300c:	f7fd f910 	bl	8000230 <memchr>
 8003010:	9a04      	ldr	r2, [sp, #16]
 8003012:	b9d8      	cbnz	r0, 800304c <_vfiprintf_r+0x12c>
 8003014:	06d1      	lsls	r1, r2, #27
 8003016:	bf44      	itt	mi
 8003018:	2320      	movmi	r3, #32
 800301a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800301e:	0713      	lsls	r3, r2, #28
 8003020:	bf44      	itt	mi
 8003022:	232b      	movmi	r3, #43	; 0x2b
 8003024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003028:	f89a 3000 	ldrb.w	r3, [sl]
 800302c:	2b2a      	cmp	r3, #42	; 0x2a
 800302e:	d015      	beq.n	800305c <_vfiprintf_r+0x13c>
 8003030:	9a07      	ldr	r2, [sp, #28]
 8003032:	4654      	mov	r4, sl
 8003034:	2000      	movs	r0, #0
 8003036:	f04f 0c0a 	mov.w	ip, #10
 800303a:	4621      	mov	r1, r4
 800303c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003040:	3b30      	subs	r3, #48	; 0x30
 8003042:	2b09      	cmp	r3, #9
 8003044:	d94e      	bls.n	80030e4 <_vfiprintf_r+0x1c4>
 8003046:	b1b0      	cbz	r0, 8003076 <_vfiprintf_r+0x156>
 8003048:	9207      	str	r2, [sp, #28]
 800304a:	e014      	b.n	8003076 <_vfiprintf_r+0x156>
 800304c:	eba0 0308 	sub.w	r3, r0, r8
 8003050:	fa09 f303 	lsl.w	r3, r9, r3
 8003054:	4313      	orrs	r3, r2
 8003056:	9304      	str	r3, [sp, #16]
 8003058:	46a2      	mov	sl, r4
 800305a:	e7d2      	b.n	8003002 <_vfiprintf_r+0xe2>
 800305c:	9b03      	ldr	r3, [sp, #12]
 800305e:	1d19      	adds	r1, r3, #4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	9103      	str	r1, [sp, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	bfbb      	ittet	lt
 8003068:	425b      	neglt	r3, r3
 800306a:	f042 0202 	orrlt.w	r2, r2, #2
 800306e:	9307      	strge	r3, [sp, #28]
 8003070:	9307      	strlt	r3, [sp, #28]
 8003072:	bfb8      	it	lt
 8003074:	9204      	strlt	r2, [sp, #16]
 8003076:	7823      	ldrb	r3, [r4, #0]
 8003078:	2b2e      	cmp	r3, #46	; 0x2e
 800307a:	d10c      	bne.n	8003096 <_vfiprintf_r+0x176>
 800307c:	7863      	ldrb	r3, [r4, #1]
 800307e:	2b2a      	cmp	r3, #42	; 0x2a
 8003080:	d135      	bne.n	80030ee <_vfiprintf_r+0x1ce>
 8003082:	9b03      	ldr	r3, [sp, #12]
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	bfb8      	it	lt
 800308e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003092:	3402      	adds	r4, #2
 8003094:	9305      	str	r3, [sp, #20]
 8003096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800317c <_vfiprintf_r+0x25c>
 800309a:	7821      	ldrb	r1, [r4, #0]
 800309c:	2203      	movs	r2, #3
 800309e:	4650      	mov	r0, sl
 80030a0:	f7fd f8c6 	bl	8000230 <memchr>
 80030a4:	b140      	cbz	r0, 80030b8 <_vfiprintf_r+0x198>
 80030a6:	2340      	movs	r3, #64	; 0x40
 80030a8:	eba0 000a 	sub.w	r0, r0, sl
 80030ac:	fa03 f000 	lsl.w	r0, r3, r0
 80030b0:	9b04      	ldr	r3, [sp, #16]
 80030b2:	4303      	orrs	r3, r0
 80030b4:	3401      	adds	r4, #1
 80030b6:	9304      	str	r3, [sp, #16]
 80030b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030bc:	482c      	ldr	r0, [pc, #176]	; (8003170 <_vfiprintf_r+0x250>)
 80030be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030c2:	2206      	movs	r2, #6
 80030c4:	f7fd f8b4 	bl	8000230 <memchr>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d03f      	beq.n	800314c <_vfiprintf_r+0x22c>
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <_vfiprintf_r+0x254>)
 80030ce:	bb1b      	cbnz	r3, 8003118 <_vfiprintf_r+0x1f8>
 80030d0:	9b03      	ldr	r3, [sp, #12]
 80030d2:	3307      	adds	r3, #7
 80030d4:	f023 0307 	bic.w	r3, r3, #7
 80030d8:	3308      	adds	r3, #8
 80030da:	9303      	str	r3, [sp, #12]
 80030dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030de:	443b      	add	r3, r7
 80030e0:	9309      	str	r3, [sp, #36]	; 0x24
 80030e2:	e767      	b.n	8002fb4 <_vfiprintf_r+0x94>
 80030e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80030e8:	460c      	mov	r4, r1
 80030ea:	2001      	movs	r0, #1
 80030ec:	e7a5      	b.n	800303a <_vfiprintf_r+0x11a>
 80030ee:	2300      	movs	r3, #0
 80030f0:	3401      	adds	r4, #1
 80030f2:	9305      	str	r3, [sp, #20]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f04f 0c0a 	mov.w	ip, #10
 80030fa:	4620      	mov	r0, r4
 80030fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003100:	3a30      	subs	r2, #48	; 0x30
 8003102:	2a09      	cmp	r2, #9
 8003104:	d903      	bls.n	800310e <_vfiprintf_r+0x1ee>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0c5      	beq.n	8003096 <_vfiprintf_r+0x176>
 800310a:	9105      	str	r1, [sp, #20]
 800310c:	e7c3      	b.n	8003096 <_vfiprintf_r+0x176>
 800310e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003112:	4604      	mov	r4, r0
 8003114:	2301      	movs	r3, #1
 8003116:	e7f0      	b.n	80030fa <_vfiprintf_r+0x1da>
 8003118:	ab03      	add	r3, sp, #12
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	462a      	mov	r2, r5
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <_vfiprintf_r+0x258>)
 8003120:	a904      	add	r1, sp, #16
 8003122:	4630      	mov	r0, r6
 8003124:	f3af 8000 	nop.w
 8003128:	4607      	mov	r7, r0
 800312a:	1c78      	adds	r0, r7, #1
 800312c:	d1d6      	bne.n	80030dc <_vfiprintf_r+0x1bc>
 800312e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003130:	07d9      	lsls	r1, r3, #31
 8003132:	d405      	bmi.n	8003140 <_vfiprintf_r+0x220>
 8003134:	89ab      	ldrh	r3, [r5, #12]
 8003136:	059a      	lsls	r2, r3, #22
 8003138:	d402      	bmi.n	8003140 <_vfiprintf_r+0x220>
 800313a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800313c:	f7ff fd7f 	bl	8002c3e <__retarget_lock_release_recursive>
 8003140:	89ab      	ldrh	r3, [r5, #12]
 8003142:	065b      	lsls	r3, r3, #25
 8003144:	f53f af12 	bmi.w	8002f6c <_vfiprintf_r+0x4c>
 8003148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800314a:	e711      	b.n	8002f70 <_vfiprintf_r+0x50>
 800314c:	ab03      	add	r3, sp, #12
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	462a      	mov	r2, r5
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <_vfiprintf_r+0x258>)
 8003154:	a904      	add	r1, sp, #16
 8003156:	4630      	mov	r0, r6
 8003158:	f000 f880 	bl	800325c <_printf_i>
 800315c:	e7e4      	b.n	8003128 <_vfiprintf_r+0x208>
 800315e:	bf00      	nop
 8003160:	080036c4 	.word	0x080036c4
 8003164:	080036e4 	.word	0x080036e4
 8003168:	080036a4 	.word	0x080036a4
 800316c:	08003704 	.word	0x08003704
 8003170:	0800370e 	.word	0x0800370e
 8003174:	00000000 	.word	0x00000000
 8003178:	08002efb 	.word	0x08002efb
 800317c:	0800370a 	.word	0x0800370a

08003180 <_printf_common>:
 8003180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003184:	4616      	mov	r6, r2
 8003186:	4699      	mov	r9, r3
 8003188:	688a      	ldr	r2, [r1, #8]
 800318a:	690b      	ldr	r3, [r1, #16]
 800318c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003190:	4293      	cmp	r3, r2
 8003192:	bfb8      	it	lt
 8003194:	4613      	movlt	r3, r2
 8003196:	6033      	str	r3, [r6, #0]
 8003198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800319c:	4607      	mov	r7, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	b10a      	cbz	r2, 80031a6 <_printf_common+0x26>
 80031a2:	3301      	adds	r3, #1
 80031a4:	6033      	str	r3, [r6, #0]
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	0699      	lsls	r1, r3, #26
 80031aa:	bf42      	ittt	mi
 80031ac:	6833      	ldrmi	r3, [r6, #0]
 80031ae:	3302      	addmi	r3, #2
 80031b0:	6033      	strmi	r3, [r6, #0]
 80031b2:	6825      	ldr	r5, [r4, #0]
 80031b4:	f015 0506 	ands.w	r5, r5, #6
 80031b8:	d106      	bne.n	80031c8 <_printf_common+0x48>
 80031ba:	f104 0a19 	add.w	sl, r4, #25
 80031be:	68e3      	ldr	r3, [r4, #12]
 80031c0:	6832      	ldr	r2, [r6, #0]
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	42ab      	cmp	r3, r5
 80031c6:	dc26      	bgt.n	8003216 <_printf_common+0x96>
 80031c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031cc:	1e13      	subs	r3, r2, #0
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	bf18      	it	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	0692      	lsls	r2, r2, #26
 80031d6:	d42b      	bmi.n	8003230 <_printf_common+0xb0>
 80031d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031dc:	4649      	mov	r1, r9
 80031de:	4638      	mov	r0, r7
 80031e0:	47c0      	blx	r8
 80031e2:	3001      	adds	r0, #1
 80031e4:	d01e      	beq.n	8003224 <_printf_common+0xa4>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	68e5      	ldr	r5, [r4, #12]
 80031ea:	6832      	ldr	r2, [r6, #0]
 80031ec:	f003 0306 	and.w	r3, r3, #6
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	bf08      	it	eq
 80031f4:	1aad      	subeq	r5, r5, r2
 80031f6:	68a3      	ldr	r3, [r4, #8]
 80031f8:	6922      	ldr	r2, [r4, #16]
 80031fa:	bf0c      	ite	eq
 80031fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003200:	2500      	movne	r5, #0
 8003202:	4293      	cmp	r3, r2
 8003204:	bfc4      	itt	gt
 8003206:	1a9b      	subgt	r3, r3, r2
 8003208:	18ed      	addgt	r5, r5, r3
 800320a:	2600      	movs	r6, #0
 800320c:	341a      	adds	r4, #26
 800320e:	42b5      	cmp	r5, r6
 8003210:	d11a      	bne.n	8003248 <_printf_common+0xc8>
 8003212:	2000      	movs	r0, #0
 8003214:	e008      	b.n	8003228 <_printf_common+0xa8>
 8003216:	2301      	movs	r3, #1
 8003218:	4652      	mov	r2, sl
 800321a:	4649      	mov	r1, r9
 800321c:	4638      	mov	r0, r7
 800321e:	47c0      	blx	r8
 8003220:	3001      	adds	r0, #1
 8003222:	d103      	bne.n	800322c <_printf_common+0xac>
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322c:	3501      	adds	r5, #1
 800322e:	e7c6      	b.n	80031be <_printf_common+0x3e>
 8003230:	18e1      	adds	r1, r4, r3
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	2030      	movs	r0, #48	; 0x30
 8003236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800323a:	4422      	add	r2, r4
 800323c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003244:	3302      	adds	r3, #2
 8003246:	e7c7      	b.n	80031d8 <_printf_common+0x58>
 8003248:	2301      	movs	r3, #1
 800324a:	4622      	mov	r2, r4
 800324c:	4649      	mov	r1, r9
 800324e:	4638      	mov	r0, r7
 8003250:	47c0      	blx	r8
 8003252:	3001      	adds	r0, #1
 8003254:	d0e6      	beq.n	8003224 <_printf_common+0xa4>
 8003256:	3601      	adds	r6, #1
 8003258:	e7d9      	b.n	800320e <_printf_common+0x8e>
	...

0800325c <_printf_i>:
 800325c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	7e0f      	ldrb	r7, [r1, #24]
 8003262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003264:	2f78      	cmp	r7, #120	; 0x78
 8003266:	4691      	mov	r9, r2
 8003268:	4680      	mov	r8, r0
 800326a:	460c      	mov	r4, r1
 800326c:	469a      	mov	sl, r3
 800326e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003272:	d807      	bhi.n	8003284 <_printf_i+0x28>
 8003274:	2f62      	cmp	r7, #98	; 0x62
 8003276:	d80a      	bhi.n	800328e <_printf_i+0x32>
 8003278:	2f00      	cmp	r7, #0
 800327a:	f000 80d8 	beq.w	800342e <_printf_i+0x1d2>
 800327e:	2f58      	cmp	r7, #88	; 0x58
 8003280:	f000 80a3 	beq.w	80033ca <_printf_i+0x16e>
 8003284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800328c:	e03a      	b.n	8003304 <_printf_i+0xa8>
 800328e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003292:	2b15      	cmp	r3, #21
 8003294:	d8f6      	bhi.n	8003284 <_printf_i+0x28>
 8003296:	a101      	add	r1, pc, #4	; (adr r1, 800329c <_printf_i+0x40>)
 8003298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	08003309 	.word	0x08003309
 80032a4:	08003285 	.word	0x08003285
 80032a8:	08003285 	.word	0x08003285
 80032ac:	08003285 	.word	0x08003285
 80032b0:	08003285 	.word	0x08003285
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003285 	.word	0x08003285
 80032bc:	08003285 	.word	0x08003285
 80032c0:	08003285 	.word	0x08003285
 80032c4:	08003285 	.word	0x08003285
 80032c8:	08003415 	.word	0x08003415
 80032cc:	08003339 	.word	0x08003339
 80032d0:	080033f7 	.word	0x080033f7
 80032d4:	08003285 	.word	0x08003285
 80032d8:	08003285 	.word	0x08003285
 80032dc:	08003437 	.word	0x08003437
 80032e0:	08003285 	.word	0x08003285
 80032e4:	08003339 	.word	0x08003339
 80032e8:	08003285 	.word	0x08003285
 80032ec:	08003285 	.word	0x08003285
 80032f0:	080033ff 	.word	0x080033ff
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	602a      	str	r2, [r5, #0]
 80032fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003304:	2301      	movs	r3, #1
 8003306:	e0a3      	b.n	8003450 <_printf_i+0x1f4>
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	6829      	ldr	r1, [r5, #0]
 800330c:	0606      	lsls	r6, r0, #24
 800330e:	f101 0304 	add.w	r3, r1, #4
 8003312:	d50a      	bpl.n	800332a <_printf_i+0xce>
 8003314:	680e      	ldr	r6, [r1, #0]
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	2e00      	cmp	r6, #0
 800331a:	da03      	bge.n	8003324 <_printf_i+0xc8>
 800331c:	232d      	movs	r3, #45	; 0x2d
 800331e:	4276      	negs	r6, r6
 8003320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003324:	485e      	ldr	r0, [pc, #376]	; (80034a0 <_printf_i+0x244>)
 8003326:	230a      	movs	r3, #10
 8003328:	e019      	b.n	800335e <_printf_i+0x102>
 800332a:	680e      	ldr	r6, [r1, #0]
 800332c:	602b      	str	r3, [r5, #0]
 800332e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003332:	bf18      	it	ne
 8003334:	b236      	sxthne	r6, r6
 8003336:	e7ef      	b.n	8003318 <_printf_i+0xbc>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	6029      	str	r1, [r5, #0]
 8003340:	0601      	lsls	r1, r0, #24
 8003342:	d501      	bpl.n	8003348 <_printf_i+0xec>
 8003344:	681e      	ldr	r6, [r3, #0]
 8003346:	e002      	b.n	800334e <_printf_i+0xf2>
 8003348:	0646      	lsls	r6, r0, #25
 800334a:	d5fb      	bpl.n	8003344 <_printf_i+0xe8>
 800334c:	881e      	ldrh	r6, [r3, #0]
 800334e:	4854      	ldr	r0, [pc, #336]	; (80034a0 <_printf_i+0x244>)
 8003350:	2f6f      	cmp	r7, #111	; 0x6f
 8003352:	bf0c      	ite	eq
 8003354:	2308      	moveq	r3, #8
 8003356:	230a      	movne	r3, #10
 8003358:	2100      	movs	r1, #0
 800335a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800335e:	6865      	ldr	r5, [r4, #4]
 8003360:	60a5      	str	r5, [r4, #8]
 8003362:	2d00      	cmp	r5, #0
 8003364:	bfa2      	ittt	ge
 8003366:	6821      	ldrge	r1, [r4, #0]
 8003368:	f021 0104 	bicge.w	r1, r1, #4
 800336c:	6021      	strge	r1, [r4, #0]
 800336e:	b90e      	cbnz	r6, 8003374 <_printf_i+0x118>
 8003370:	2d00      	cmp	r5, #0
 8003372:	d04d      	beq.n	8003410 <_printf_i+0x1b4>
 8003374:	4615      	mov	r5, r2
 8003376:	fbb6 f1f3 	udiv	r1, r6, r3
 800337a:	fb03 6711 	mls	r7, r3, r1, r6
 800337e:	5dc7      	ldrb	r7, [r0, r7]
 8003380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003384:	4637      	mov	r7, r6
 8003386:	42bb      	cmp	r3, r7
 8003388:	460e      	mov	r6, r1
 800338a:	d9f4      	bls.n	8003376 <_printf_i+0x11a>
 800338c:	2b08      	cmp	r3, #8
 800338e:	d10b      	bne.n	80033a8 <_printf_i+0x14c>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	07de      	lsls	r6, r3, #31
 8003394:	d508      	bpl.n	80033a8 <_printf_i+0x14c>
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	6861      	ldr	r1, [r4, #4]
 800339a:	4299      	cmp	r1, r3
 800339c:	bfde      	ittt	le
 800339e:	2330      	movle	r3, #48	; 0x30
 80033a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033a8:	1b52      	subs	r2, r2, r5
 80033aa:	6122      	str	r2, [r4, #16]
 80033ac:	f8cd a000 	str.w	sl, [sp]
 80033b0:	464b      	mov	r3, r9
 80033b2:	aa03      	add	r2, sp, #12
 80033b4:	4621      	mov	r1, r4
 80033b6:	4640      	mov	r0, r8
 80033b8:	f7ff fee2 	bl	8003180 <_printf_common>
 80033bc:	3001      	adds	r0, #1
 80033be:	d14c      	bne.n	800345a <_printf_i+0x1fe>
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	b004      	add	sp, #16
 80033c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ca:	4835      	ldr	r0, [pc, #212]	; (80034a0 <_printf_i+0x244>)
 80033cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033d0:	6829      	ldr	r1, [r5, #0]
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80033d8:	6029      	str	r1, [r5, #0]
 80033da:	061d      	lsls	r5, r3, #24
 80033dc:	d514      	bpl.n	8003408 <_printf_i+0x1ac>
 80033de:	07df      	lsls	r7, r3, #31
 80033e0:	bf44      	itt	mi
 80033e2:	f043 0320 	orrmi.w	r3, r3, #32
 80033e6:	6023      	strmi	r3, [r4, #0]
 80033e8:	b91e      	cbnz	r6, 80033f2 <_printf_i+0x196>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	f023 0320 	bic.w	r3, r3, #32
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	2310      	movs	r3, #16
 80033f4:	e7b0      	b.n	8003358 <_printf_i+0xfc>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	f043 0320 	orr.w	r3, r3, #32
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	2378      	movs	r3, #120	; 0x78
 8003400:	4828      	ldr	r0, [pc, #160]	; (80034a4 <_printf_i+0x248>)
 8003402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003406:	e7e3      	b.n	80033d0 <_printf_i+0x174>
 8003408:	0659      	lsls	r1, r3, #25
 800340a:	bf48      	it	mi
 800340c:	b2b6      	uxthmi	r6, r6
 800340e:	e7e6      	b.n	80033de <_printf_i+0x182>
 8003410:	4615      	mov	r5, r2
 8003412:	e7bb      	b.n	800338c <_printf_i+0x130>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	6826      	ldr	r6, [r4, #0]
 8003418:	6961      	ldr	r1, [r4, #20]
 800341a:	1d18      	adds	r0, r3, #4
 800341c:	6028      	str	r0, [r5, #0]
 800341e:	0635      	lsls	r5, r6, #24
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	d501      	bpl.n	8003428 <_printf_i+0x1cc>
 8003424:	6019      	str	r1, [r3, #0]
 8003426:	e002      	b.n	800342e <_printf_i+0x1d2>
 8003428:	0670      	lsls	r0, r6, #25
 800342a:	d5fb      	bpl.n	8003424 <_printf_i+0x1c8>
 800342c:	8019      	strh	r1, [r3, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	6123      	str	r3, [r4, #16]
 8003432:	4615      	mov	r5, r2
 8003434:	e7ba      	b.n	80033ac <_printf_i+0x150>
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	1d1a      	adds	r2, r3, #4
 800343a:	602a      	str	r2, [r5, #0]
 800343c:	681d      	ldr	r5, [r3, #0]
 800343e:	6862      	ldr	r2, [r4, #4]
 8003440:	2100      	movs	r1, #0
 8003442:	4628      	mov	r0, r5
 8003444:	f7fc fef4 	bl	8000230 <memchr>
 8003448:	b108      	cbz	r0, 800344e <_printf_i+0x1f2>
 800344a:	1b40      	subs	r0, r0, r5
 800344c:	6060      	str	r0, [r4, #4]
 800344e:	6863      	ldr	r3, [r4, #4]
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	2300      	movs	r3, #0
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003458:	e7a8      	b.n	80033ac <_printf_i+0x150>
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	462a      	mov	r2, r5
 800345e:	4649      	mov	r1, r9
 8003460:	4640      	mov	r0, r8
 8003462:	47d0      	blx	sl
 8003464:	3001      	adds	r0, #1
 8003466:	d0ab      	beq.n	80033c0 <_printf_i+0x164>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	079b      	lsls	r3, r3, #30
 800346c:	d413      	bmi.n	8003496 <_printf_i+0x23a>
 800346e:	68e0      	ldr	r0, [r4, #12]
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	4298      	cmp	r0, r3
 8003474:	bfb8      	it	lt
 8003476:	4618      	movlt	r0, r3
 8003478:	e7a4      	b.n	80033c4 <_printf_i+0x168>
 800347a:	2301      	movs	r3, #1
 800347c:	4632      	mov	r2, r6
 800347e:	4649      	mov	r1, r9
 8003480:	4640      	mov	r0, r8
 8003482:	47d0      	blx	sl
 8003484:	3001      	adds	r0, #1
 8003486:	d09b      	beq.n	80033c0 <_printf_i+0x164>
 8003488:	3501      	adds	r5, #1
 800348a:	68e3      	ldr	r3, [r4, #12]
 800348c:	9903      	ldr	r1, [sp, #12]
 800348e:	1a5b      	subs	r3, r3, r1
 8003490:	42ab      	cmp	r3, r5
 8003492:	dcf2      	bgt.n	800347a <_printf_i+0x21e>
 8003494:	e7eb      	b.n	800346e <_printf_i+0x212>
 8003496:	2500      	movs	r5, #0
 8003498:	f104 0619 	add.w	r6, r4, #25
 800349c:	e7f5      	b.n	800348a <_printf_i+0x22e>
 800349e:	bf00      	nop
 80034a0:	08003715 	.word	0x08003715
 80034a4:	08003726 	.word	0x08003726

080034a8 <_sbrk_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4d06      	ldr	r5, [pc, #24]	; (80034c4 <_sbrk_r+0x1c>)
 80034ac:	2300      	movs	r3, #0
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	f7fd fcc8 	bl	8000e48 <_sbrk>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_sbrk_r+0x1a>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_sbrk_r+0x1a>
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	200001f4 	.word	0x200001f4

080034c8 <__sread>:
 80034c8:	b510      	push	{r4, lr}
 80034ca:	460c      	mov	r4, r1
 80034cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d0:	f000 f8a0 	bl	8003614 <_read_r>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	bfab      	itete	ge
 80034d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034da:	89a3      	ldrhlt	r3, [r4, #12]
 80034dc:	181b      	addge	r3, r3, r0
 80034de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034e2:	bfac      	ite	ge
 80034e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80034e6:	81a3      	strhlt	r3, [r4, #12]
 80034e8:	bd10      	pop	{r4, pc}

080034ea <__swrite>:
 80034ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ee:	461f      	mov	r7, r3
 80034f0:	898b      	ldrh	r3, [r1, #12]
 80034f2:	05db      	lsls	r3, r3, #23
 80034f4:	4605      	mov	r5, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	4616      	mov	r6, r2
 80034fa:	d505      	bpl.n	8003508 <__swrite+0x1e>
 80034fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003500:	2302      	movs	r3, #2
 8003502:	2200      	movs	r2, #0
 8003504:	f000 f868 	bl	80035d8 <_lseek_r>
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800350e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003512:	81a3      	strh	r3, [r4, #12]
 8003514:	4632      	mov	r2, r6
 8003516:	463b      	mov	r3, r7
 8003518:	4628      	mov	r0, r5
 800351a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800351e:	f000 b817 	b.w	8003550 <_write_r>

08003522 <__sseek>:
 8003522:	b510      	push	{r4, lr}
 8003524:	460c      	mov	r4, r1
 8003526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352a:	f000 f855 	bl	80035d8 <_lseek_r>
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	bf15      	itete	ne
 8003534:	6560      	strne	r0, [r4, #84]	; 0x54
 8003536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800353a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800353e:	81a3      	strheq	r3, [r4, #12]
 8003540:	bf18      	it	ne
 8003542:	81a3      	strhne	r3, [r4, #12]
 8003544:	bd10      	pop	{r4, pc}

08003546 <__sclose>:
 8003546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354a:	f000 b813 	b.w	8003574 <_close_r>
	...

08003550 <_write_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4d07      	ldr	r5, [pc, #28]	; (8003570 <_write_r+0x20>)
 8003554:	4604      	mov	r4, r0
 8003556:	4608      	mov	r0, r1
 8003558:	4611      	mov	r1, r2
 800355a:	2200      	movs	r2, #0
 800355c:	602a      	str	r2, [r5, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	f7fd fc21 	bl	8000da6 <_write>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d102      	bne.n	800356e <_write_r+0x1e>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b103      	cbz	r3, 800356e <_write_r+0x1e>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	200001f4 	.word	0x200001f4

08003574 <_close_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	4d06      	ldr	r5, [pc, #24]	; (8003590 <_close_r+0x1c>)
 8003578:	2300      	movs	r3, #0
 800357a:	4604      	mov	r4, r0
 800357c:	4608      	mov	r0, r1
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	f7fd fc2d 	bl	8000dde <_close>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d102      	bne.n	800358e <_close_r+0x1a>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	b103      	cbz	r3, 800358e <_close_r+0x1a>
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	200001f4 	.word	0x200001f4

08003594 <_fstat_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4d07      	ldr	r5, [pc, #28]	; (80035b4 <_fstat_r+0x20>)
 8003598:	2300      	movs	r3, #0
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	f7fd fc28 	bl	8000df6 <_fstat>
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	d102      	bne.n	80035b0 <_fstat_r+0x1c>
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	b103      	cbz	r3, 80035b0 <_fstat_r+0x1c>
 80035ae:	6023      	str	r3, [r4, #0]
 80035b0:	bd38      	pop	{r3, r4, r5, pc}
 80035b2:	bf00      	nop
 80035b4:	200001f4 	.word	0x200001f4

080035b8 <_isatty_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	4d06      	ldr	r5, [pc, #24]	; (80035d4 <_isatty_r+0x1c>)
 80035bc:	2300      	movs	r3, #0
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	f7fd fc27 	bl	8000e16 <_isatty>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d102      	bne.n	80035d2 <_isatty_r+0x1a>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	b103      	cbz	r3, 80035d2 <_isatty_r+0x1a>
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
 80035d4:	200001f4 	.word	0x200001f4

080035d8 <_lseek_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4d07      	ldr	r5, [pc, #28]	; (80035f8 <_lseek_r+0x20>)
 80035dc:	4604      	mov	r4, r0
 80035de:	4608      	mov	r0, r1
 80035e0:	4611      	mov	r1, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	602a      	str	r2, [r5, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f7fd fc20 	bl	8000e2c <_lseek>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d102      	bne.n	80035f6 <_lseek_r+0x1e>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	b103      	cbz	r3, 80035f6 <_lseek_r+0x1e>
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	200001f4 	.word	0x200001f4

080035fc <__malloc_lock>:
 80035fc:	4801      	ldr	r0, [pc, #4]	; (8003604 <__malloc_lock+0x8>)
 80035fe:	f7ff bb1d 	b.w	8002c3c <__retarget_lock_acquire_recursive>
 8003602:	bf00      	nop
 8003604:	200001e8 	.word	0x200001e8

08003608 <__malloc_unlock>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__malloc_unlock+0x8>)
 800360a:	f7ff bb18 	b.w	8002c3e <__retarget_lock_release_recursive>
 800360e:	bf00      	nop
 8003610:	200001e8 	.word	0x200001e8

08003614 <_read_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4d07      	ldr	r5, [pc, #28]	; (8003634 <_read_r+0x20>)
 8003618:	4604      	mov	r4, r0
 800361a:	4608      	mov	r0, r1
 800361c:	4611      	mov	r1, r2
 800361e:	2200      	movs	r2, #0
 8003620:	602a      	str	r2, [r5, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	f7fd fba2 	bl	8000d6c <_read>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_read_r+0x1e>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_read_r+0x1e>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	200001f4 	.word	0x200001f4

08003638 <_init>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	bf00      	nop
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr

08003644 <_fini>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	bf00      	nop
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr
